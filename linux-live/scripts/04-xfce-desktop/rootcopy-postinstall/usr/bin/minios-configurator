#!/bin/bash
# MiniOS Configurator
# A graphical tool for configuring MiniOS settings
# Allows modifying parameters in /etc/live/config.conf
#
# Usage: minios-configurator [/path/to/config/file]
# If no config file path is provided, it defaults to /etc/live/config.conf
#
# Author: crims0n <https://minios.dev>

# Set text domain
export TEXTDOMAIN="minios-configurator"

# Display an error message
error() {
    local MESSAGE="${1-}"
    local TITLE="${2-$(gettext "Error")}"
    yad --error --center --borders=10 --window-icon="dialog-error" --title="$TITLE" --text="$MESSAGE"
}

# Display a warning message
warning() {
    local MESSAGE="${1-}"
    local TITLE="${2-$(gettext "Warning")}"
    yad --warning --center --borders=10 --window-icon="dialog-warning" --title="$TITLE" --text="$MESSAGE"
}

# Display an information message
information() {
    local MESSAGE="${1-}"
    local TITLE="${2-$(gettext "Information")}"
    yad --info --center --borders=10 --window-icon="dialog-information" --title="$TITLE" --text="$MESSAGE"
}

# A function for updating a configuration file in bash.
# Usage:
#   update_config [-a] CONFIG_FILE [VAR1] [VAR2] [...]
#
# Arguments:
#   -a: Update only declared variables, even if empty.
#   CONFIG_FILE - required, this is the path to your configuration file.
#   VAR1, VAR2, etc - the names of variables you wish to update in the configuration file.
#   If variable names are not provided, the function will update all variables found in the file.
update_config() {
    local ALL_DECLARED=false
    if [[ "$1" == "-a" ]]; then
        ALL_DECLARED=true
        shift
    fi

    local CONFIG_FILE="$1"
    shift

    if [[ ! "$CONFIG_FILE" ]]; then
        error "No configuration file given."
        exit 1
    fi
    if [[ ! -f "$CONFIG_FILE" ]]; then
        error "$CONFIG_FILE is not a file!"
        exit 1
    fi
    if [[ ! -r "$CONFIG_FILE" ]]; then
        error "$CONFIG_FILE is not readable!"
        exit 1
    fi

    local -a ARGS
    if (($# > 0)); then
        ARGS=("$@")
    else
        ARGS=($(grep -v '^#' "$CONFIG_FILE" | awk -F '=' '{print $1}'))
    fi

    for ARG in "${ARGS[@]}"; do
        local -n VAR="$ARG"
        local NEW_VALUE ELEMENT

        if ! $ALL_DECLARED && [[ -z "${VAR[@]}" ]]; then
            continue
        elif $ALL_DECLARED && [[ -z "${VAR+x}" ]]; then
            continue
        fi

        case "$(declare -p "$ARG" 2>/dev/null)" in
        "declare -a"*)
            NEW_VALUE="$ARG=("
            for ELEMENT in "${VAR[@]}"; do
                NEW_VALUE+="\"$ELEMENT\""
                [[ "$ELEMENT" != "${VAR[-1]}" ]] && NEW_VALUE+=" "
            done
            NEW_VALUE+=")"
            ;;
        *)
            NEW_VALUE="$ARG='$VAR'"
            ;;
        esac

        if grep -q "^$ARG=" "$CONFIG_FILE"; then
            sed -i "s|^$ARG=.*|$NEW_VALUE|" "$CONFIG_FILE"
        else
            echo -e "\n$NEW_VALUE" >>"$CONFIG_FILE"
        fi
    done
}

# Check if the script is running as root, if not, run with root privileges using pkexec
check_root_permissions() {
    if [[ "$EUID" -ne 0 ]]; then
        pkexec "$0" "$@"
        exit 0
    fi
}

# Call the function to check root permissions
check_root_permissions "$@"

CONFIG_FILE="${1:-/etc/live/config.conf}"
. "$CONFIG_FILE"

DEFAULT_TARGETS=('graphical' 'multi-user' 'rescue')
DEFAULT_TARGET_FIELD="$DEFAULT_TARGET!$(printf "%s\n" "${DEFAULT_TARGETS[@]/$DEFAULT_TARGET/}" | grep -v '^$' | tr '\n' '!' | sed 's/!$//')"
MODULE_MODES=('simple' 'merged')
MODULE_MODE_FIELD="$MODULE_MODE!$(printf "%s\n" "${MODULE_MODES[@]/$MODULE_MODE/}" | grep -v '^$' | tr '\n' '!' | sed 's/!$//')"

while true; do
    FORM_OUTPUT=$(
        yad --form --columns 2 --center --title="$(gettext "MiniOS Configurator")" \
            --borders=10 \
            --window-icon="preferences-system" \
            --width=500 \
            --text="<span>$(gettext 'See live-config manual for parameter details')\n\n</span><span font-size=\"large\">$(gettext 'Configure MiniOS Live settings')\n</span>" \
            --text-align="center" \
            --field="$(gettext "Live config cmdline")" "$LIVE_CONFIG_CMDLINE" \
            --field="$(gettext "Hostname")" "$LIVE_HOSTNAME" \
            --field="$(gettext "Username")" "$LIVE_USERNAME" \
            --field="$(gettext "Full name")" "$LIVE_USER_FULLNAME" \
            --field="$(gettext "User groups (delimiter ,)")" "$LIVE_USER_DEFAULT_GROUPS" \
            --field="$(gettext "No-root mode"):CHK" "$LIVE_CONFIG_NOROOT" \
            --field="$(gettext "Locales (delimiter ,)")" "$LIVE_LOCALES" \
            --field="$(gettext "Timezone")" "$LIVE_TIMEZONE" \
            --field="$(gettext "Keyboard model")" "$LIVE_KEYBOARD_MODEL" \
            --field="$(gettext "Keyboard layouts (delimiter ,)")" "$LIVE_KEYBOARD_LAYOUTS" \
            --field="$(gettext "Keyboard options")" "$LIVE_KEYBOARD_OPTIONS" \
            --field="$(gettext "Keyboard variants")" "$LIVE_KEYBOARD_VARIANTS" \
            --field="$(gettext "Debug mode"):CHK" "$LIVE_CONFIG_DEBUG" \
            --field="$(gettext "User password (plain)")" "$LIVE_USER_PASSWORD_PLAIN" \
            --field="$(gettext "User password (crypted)")" "$LIVE_USER_PASSWORD_CRYPTED" \
            --field="$(gettext "Root password (plain)")" "$LIVE_ROOT_PASSWORD_PLAIN" \
            --field="$(gettext "Root password (crypted)")" "$LIVE_ROOT_PASSWORD_CRYPTED" \
            --field="$(gettext "Module mode"):CB" "$MODULE_MODE_FIELD" \
            --field="$(gettext "Default SystemD target"):CB" "$DEFAULT_TARGET_FIELD" \
            --field="$(gettext "Enable services (delimiter ,)")" "$ENABLE_SERVICES" \
            --field="$(gettext "Disable services (delimiter ,)")" "$DISABLE_SERVICES" \
            --field="$(gettext "Link user directories to storage"):CHK" "$LINK_USER_DIRS" \
            --field="$(gettext "Export logs to flash drive"):CHK" "$EXPORT_LOGS"
    )

    if [ "$?" = 252 ] || [ -z "$FORM_OUTPUT" ]; then
        exit 1
    fi

    IFS='|' read -r \
        FORM_CMDLINE \
        FORM_HOSTNAME \
        FORM_USERNAME \
        FORM_FULLNAME \
        FORM_GROUPS \
        FORM_NOROOT \
        FORM_LOCALES \
        FORM_TIMEZONE \
        FORM_KB_MODEL \
        FORM_KB_LAYOUTS \
        FORM_KB_OPTIONS \
        FORM_KB_VARIANTS \
        FORM_DEBUG \
        FORM_USER_PASS_PLAIN \
        FORM_USER_PASS_CRYPT \
        FORM_ROOT_PASS_PLAIN \
        FORM_ROOT_PASS_CRYPT \
        FORM_MODULE_MODE \
        FORM_DEFAULT_TARGET \
        FORM_ENABLE_SERVICES \
        FORM_DISABLE_SERVICES \
        FORM_LINK_USER_DIRS \
        FORM_EXPORT_LOGS \
        <<<"$FORM_OUTPUT"

    # Convert boolean values to lowercase
    FORM_NOROOT=$(echo "$FORM_NOROOT" | tr '[:upper:]' '[:lower:]')
    FORM_DEBUG=$(echo "$FORM_DEBUG" | tr '[:upper:]' '[:lower:]')
    FORM_LINK_USER_DIRS=$(echo "$FORM_LINK_USER_DIRS" | tr '[:upper:]' '[:lower:]')
    FORM_EXPORT_LOGS=$(echo "$FORM_EXPORT_LOGS" | tr '[:upper:]' '[:lower:]')

    LIVE_CONFIG_CMDLINE="$FORM_CMDLINE"
    LIVE_HOSTNAME="$FORM_HOSTNAME"
    LIVE_USERNAME="$FORM_USERNAME"
    LIVE_USER_FULLNAME="$FORM_FULLNAME"
    LIVE_USER_DEFAULT_GROUPS="$FORM_GROUPS"
    LIVE_CONFIG_NOROOT="$FORM_NOROOT"
    LIVE_LOCALES="$FORM_LOCALES"
    LIVE_TIMEZONE="$FORM_TIMEZONE"
    LIVE_KEYBOARD_MODEL="$FORM_KB_MODEL"
    LIVE_KEYBOARD_LAYOUTS="$FORM_KB_LAYOUTS"
    LIVE_KEYBOARD_OPTIONS="$FORM_KB_OPTIONS"
    LIVE_KEYBOARD_VARIANTS="$FORM_KB_VARIANTS"
    LIVE_CONFIG_DEBUG="$FORM_DEBUG"
    LIVE_USER_PASSWORD_PLAIN="$FORM_USER_PASS_PLAIN"
    LIVE_USER_PASSWORD_CRYPTED="$FORM_USER_PASS_CRYPT"
    LIVE_ROOT_PASSWORD_PLAIN="$FORM_ROOT_PASS_PLAIN"
    LIVE_ROOT_PASSWORD_CRYPTED="$FORM_ROOT_PASS_CRYPT"
    MODULE_MODE="$FORM_MODULE_MODE"
    DEFAULT_TARGET="$FORM_DEFAULT_TARGET"
    ENABLE_SERVICES="$FORM_ENABLE_SERVICES"
    DISABLE_SERVICES="$FORM_DISABLE_SERVICES"
    LINK_USER_DIRS="$FORM_LINK_USER_DIRS"
    EXPORT_LOGS="$FORM_EXPORT_LOGS"
    break
done

update_config -a "$CONFIG_FILE" "${KEYS[@]}"

yad --form --center \
    --borders=10 \
    --window-icon="preferences-system" \
    --title="$(gettext 'Reminder')" \
    --text="<span>\n\n\n$(gettext 'You will need to reboot your system to apply the settings.')</span>" \
    --text-align="center" \
    --width=400 \
    --buttons-layout="center" \
    --on-top \
    --form \
    --button=Ok:0
