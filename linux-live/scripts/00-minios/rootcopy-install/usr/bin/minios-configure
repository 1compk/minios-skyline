#!/bin/bash
#
# Ð¡ommand line parsing script.
# Author: crims0n. <http://minios.dev>
#

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

function console_colors() {
    RED="\e[31m"
    GREEN="\e[32m"
    YELLOW="\e[33m"
    BLUE="\e[34m"
    MAGENTA="\e[35m"
    CYAN="\e[36m"
    LIGHTGRAY="\e[37m"
    DARKGRAY="\e[90m"
    LIGHTRED="\e[91m"
    LIGHTGREEN="\e[92m"
    LIGHTYELLOW="\e[93m"
    LIGHTBLUE="\e[94m"
    LIGHTMAGENTA="\e[95m"
    LIGHTCYAN="\e[96m"
    BOLD="\e[1m"
    DIM="\e[2m"
    UNDERLINED="\e[4m"
    BLINK="\e[5m"
    REVERSE="\e[7m"
    HIDDEN="\e[8m"
    ENDCOLOR="\e[0m"
}

function help() {
    # if $1 is set, use $1 as headline message in help()
    if [ -z ${1+x} ]; then
        echo -e "${LIGHTYELLOW}This script allows you to configure some parameters of $SYSTEMNAME.${ENDCOLOR}"
        echo -e
    else
        echo -e $1
        echo
    fi
    echo -e "Syntax: ${MAGENTA}$0${ENDCOLOR} parameter=value"
    if [ -L /usr/bin/$LIVEKITNAME-configure ] && [ "$0" != "/usr/bin/$LIVEKITNAME-configure" ]; then
        echo -e "\t${CYAN}$LIVEKITNAME-configure${ENDCOLOR} parameter=value"
    fi
    echo -e "root_password - root password."
    echo -e "user_name - username. If you specify the username root, then the user profile will not be used, the user_password parameter will be ignored."
    echo -e "user_password - user password."
    echo -e "host_name - hostname of the system."
    echo -e "default_target - target of systemd. For loading GUI - graphical, for loading in command line mode - multi-user, for loading in emergency mode - emergency."
    echo -e "ssh - enable ssh."
    echo -e "ssh_key - the name of the ssh public key file, which should be located in the system folder on the media (along with the main .sb modules). By default, the system looks for a file named authorized_keys.."
    echo -e "cloud - special mode to run as a cloud-init host."
    echo -e "hide_credentials - hide credentials displayed as a prompt in the console at system startup."
    echo -e ""
    echo -e "Example: ${LIGHTYELLOW}$0${ENDCOLOR} root_password=toor user_name=root user_password=evil"
    exit 0
}

function allow_root_only() {
    if [ $(id -u) -ne 0 ]; then
        echo -e "${BOLD}${RED}This script should be run as 'root'!${ENDCOLOR}"
        exit 1
    fi

    export HOME=/root
    export LC_ALL=C
}

function read_cmdline() {
    for i in $@; do
        case $i in
        user_name=*)
            USER_NAME="${i#*=}"
            shift # past argument=value
            ;;
        user_password=*)
            USER_PASSWORD="${i#*=}"
            shift # past argument=value
            ;;
        root_password=*)
            ROOT_PASSWORD="${i#*=}"
            shift # past argument=value
            ;;
        host_name=*)
            HOST_NAME="${i#*=}"
            shift # past argument=value
            ;;
        ssh_key=*)
            SSH_KEY="${i#*=}"
            shift # past argument=value
            ;;
        ssh)
            SSH=true
            shift # past argument=value
            ;;
        $LIVEKITNAME.flags=*)
            FLAGS="${i#*=}"
            shift # past argument=value
            ;;
        scripts)
            SCRIPTS=true
            shift # past argument=value
            ;;
        cloud)
            CLOUD=true
            shift # past argument with no value
            ;;
        hide_credentials)
            HIDE_CREDENTIALS=true
            shift # past argument with no value
            ;;
        *)
            UNKNOWN=true
            # unknown option
            ;;
        esac
    done
}

function read_config() { # read_config file.cfg var_name1 var_name2
    # ref: https://stackoverflow.com/a/20815951

    shopt -s extglob # needed the "one of these"-match below
    local configfile="${1?No configuration file given}"
    local keylist="${@:2}" # positional parameters 2 and following

    if [[ ! -f "$configfile" ]]; then
        echo >&2 "\"$configfile\" is not a file!"
        exit 1
    fi
    if [[ ! -r "$configfile" ]]; then
        echo >&2 "\"$configfile\" is not readable!"
        exit 1
    fi

    keylist="${keylist// /|}" # this will generate a regex 'one of these'

    # lhs : "left hand side" : Everything left of the '='
    # rhs : "right hand side": Everything right of the '='
    #
    # "lhs" will hold the name of the key you want to read.
    # The value of "rhs" will be assigned to that key.
    while IFS='= ' read -r lhs rhs; do
        # IF lhs in keylist
        # AND rhs not empty
        if [[ "$lhs" =~ ^($keylist)$ ]] && [[ -n $rhs ]]; then
            rhs="${rhs%\"*}"   # Del opening string quotes
            rhs="${rhs#\"*}"   # Del closing string quotes
            rhs="${rhs%\'*}"   # Del opening string quotes
            rhs="${rhs#\'*}"   # Del closing string quotes
            eval $lhs=\"$rhs\" # The magic happens here
        fi
        # tr used as a safeguard against dos line endings
    done <<<$(tr -d '\r' <$configfile)

    shopt -u extglob # Switching it back off after use
}

console_colors
allow_root_only

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

read_cmdline $@
if [[ $# == 0 ]] || [ "$UNKNOWN" = "true" ]; then help; fi
if [ -f /run/initramfs/lib/config ]; then
    read_config /run/initramfs/lib/config LIVEKITNAME
else
    LIVEKITNAME="minios"
fi

if [ -n "$ROOT_PASSWORD" ]; then
    echo root:$ROOT_PASSWORD | chpasswd
fi

if [ -z "$CLOUD" ]; then
    if [ -f /etc/$LIVEKITNAME/$LIVEKITNAME.conf ]; then
        read_config /etc/$LIVEKITNAME/$LIVEKITNAME.conf CLOUD
        if [ -z "$CLOUD" ]; then
            CLOUD="false"
        fi
    else
        CLOUD="false"
    fi
fi
sed -i -e "/CLOUD=/s/=.*/=$CLOUD/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
if [ "$CLOUD" != "true" ]; then
    if [ "$USER_NAME" != "root" ]; then
        # Set up user
        USER_NAME="live"
        USER_GROUP="live"
        if [ -z "$USER_PASSWORD" ]; then
            if [ "$SCRIPT_DIR" != "/usr/bin" ]; then
                if [ -f /etc/$LIVEKITNAME/$LIVEKITNAME.conf ]; then
                    read_config /etc/$LIVEKITNAME/$LIVEKITNAME.conf USER_PASSWORD
                fi
                if [ -z "$USER_PASSWORD" ]; then
                    USER_PASSWORD="evil"
                fi
            fi
        fi
        if [ ! -z "$USER_PASSWORD" ]; then
            # Set up password for user
            echo $USER_NAME:$USER_PASSWORD | chpasswd
        fi
    fi
else
    USER_NAME="root"
    SSH="true"
fi

if [ ! -f /var/.minios-setup-completed ]; then
    if [ "$USER_NAME" != "root" ]; then
        cp -rT /etc/skel /home/$USER_NAME
        # create user directories
        if [ -d /home/$USER_NAME ]; then
            for dir in Desktop Documents Downloads Music Pictures Public Templates Videos; do
                mkdir -p /home/$USER_NAME/$dir
            done
            if [ ! -d /home/$USER_NAME/.ssh ]; then
                mkdir /home/$USER_NAME/.ssh
                chmod 700 /home/$USER_NAME/.ssh
            fi
            if [ -f /root/.ssh/authorized_keys ]; then
                cp /root/.ssh/authorized_keys /home/$USER_NAME/.ssh/authorized_keys
            fi
            USER_ID=$(id -u $USER_NAME)
            GROUP_ID=$(id -g $USER_NAME)
            chown $USER_ID:$GROUP_ID /home/$USER_NAME
            chown -R $USER_ID:$GROUP_ID /home/$USER_NAME
        fi
    fi
fi

if [ "$USER_NAME" != "root" ]; then
    cat <<EOF >/etc/sudoers.d/90-minios
# live user is default user in minios.
# It needs passwordless sudo functionality.
$USER_NAME ALL=(ALL) NOPASSWD:ALL
EOF
fi

if [ "$CLOUD" != "true" ]; then
    if [ -n "$HOST_NAME" ]; then
        echo $HOST_NAME >/etc/hostname
        cat <<EOF >/etc/hosts
127.0.0.1       localhost $HOST_NAME
::1             localhost ip6-localhost ip6-loopback $HOST_NAME
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters

EOF
    fi
fi

if [ -z "$SCRIPTS" ]; then
    SCRIPTS="false"
fi

if [ -z "$HIDE_CREDENTIALS" ]; then
    HIDE_CREDENTIALS="false"
fi

if [ ! -z "$USER_NAME" ]; then
    sed -i -e "/USER_NAME=/s/=.*/=$USER_NAME/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$USER_PASSWORD" ]; then
    sed -i -e "/USER_PASSWORD=/s/=.*/=$USER_PASSWORD/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$ROOT_PASSWORD" ]; then
    sed -i -e "/ROOT_PASSWORD=/s/=.*/=$ROOT_PASSWORD/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$HOST_NAME" ]; then
    sed -i -e "/HOST_NAME=/s/=.*/=$HOST_NAME/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$DEFAULT_TARGET" ]; then
    sed -i -e "/DEFAULT_TARGET=/s/=.*/=$DEFAULT_TARGET/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$ENABLE_SERVICES" ]; then
    sed -i -e "/ENABLE_SERVICES=/s/=.*/=$ENABLE_SERVICES/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$DISABLE_SERVICES" ]; then
    sed -i -e "/DISABLE_SERVICES=/s/=.*/=$DISABLE_SERVICES/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$SSH" ]; then
    sed -i -e "/SSH=/s/=.*/=$SSH/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$SSH_KEY" ]; then
    sed -i -e "/SSH_KEY=/s/=.*/=$SSH_KEY/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$SCRIPTS" ]; then
    sed -i -e "/SCRIPTS=/s/=.*/=$SCRIPTS/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$CLOUD" ]; then
    sed -i -e "/CLOUD=/s/=.*/=$CLOUD/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
if [ ! -z "$HIDE_CREDENTIALS" ]; then
    sed -i -e "/HIDE_CREDENTIALS=/s/=.*/=$HIDE_CREDENTIALS/" /etc/$LIVEKITNAME/$LIVEKITNAME.conf
fi
