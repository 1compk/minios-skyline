#!/bin/bash
# Author: sfs <https://puppyrus.org>
# Author: crims0n <https://minios.dev>

. /usr/lib/minioslib || exit 1

[ ! "$1" ] && echo "Builds a common dpkg database from all bundles
    Usage:   $0 [bundles mount points location]
    Example: $0 /run/initramfs/memory/bundles" && exit 1

if [ ! -d /var/log/minios ]; then
    mkdir -p /var/log/minios
fi
exec 19>/var/log/minios/minios-update-dpkg.log
BASH_XTRACEFD=19
set -x

BUNDLES=$1

read_config /etc/minios/minios.conf CORE_BUNDLE_PREFIX
CORE_BUNDLE_PREFIX=${CORE_BUNDLE_PREFIX:-"00-core"}
read_config /etc/minios/config BEXT
BEXT=${BEXT:-"sb"}
DPKG_STATUS_FILE=/var/lib/dpkg/status

[ -d $(dirname $DPKG_STATUS_FILE) ] || exit

if [ -d /run/initramfs/memory/changes ]; then
    CHANGES="/run/initramfs/memory/changes"
    INITRD_TYPE="livekit"
elif [ -d /memory/changes ]; then
    CHANGES="/memory/changes"
    INITRD_TYPE="uird"
fi
# Overlayfs requires one more subdir. Detect it this way
if [ -d "$CHANGES/changes" -a -d "$CHANGES/workdir" -a "$(ls -1 "$CHANGES" | egrep -v '^changes$' | egrep -v '^workdir')" = "" ]; then
   CHANGES="$CHANGES/changes"
fi

allow_root_only

# Concatenate all statoverride files from all bundles and sort them uniquely into /var/lib/dpkg/statoverride
cat "$BUNDLES"/*."$BEXT"/var/lib/dpkg/statoverride | sort -u >/var/lib/dpkg/statoverride

# Create a temporary file and set up a trap to remove it on exit
TEMP_FILE=$(mktemp /run/minios-update-dpkg.XXXXXX)
trap 'rm -f "$TEMP_FILE"*' EXIT

# Process the core bundle(s)
for CORE_BUNDLE_PATH in "$BUNDLES"/"$CORE_BUNDLE_PREFIX"*."$BEXT"; do
    # Copy the dpkg status file from the core bundle to the temporary file and then to the dpkg status file on the system
    cp "$CORE_BUNDLE_PATH$DPKG_STATUS_FILE" "$TEMP_FILE" || exit
    cp "$TEMP_FILE" "$DPKG_STATUS_FILE"
done

# Process other bundles (not core bundle)
for BUNDLE in $(ls -1d $BUNDLES/*.$BEXT | egrep -v "^$CORE_BUNDLE_PATH"); do
    # Skip this bundle if it doesn't have a dpkg status file or if it is a core bundle
    [ -f "$BUNDLE$DPKG_STATUS_FILE" ] || continue
    [ "$BUNDLE" = "$CORE_BUNDLE_PATH" ] && continue

    # Append this bundle's dpkg status file to the temporary file and append its pfsdeb output to another temporary file
    cat "$BUNDLE$DPKG_STATUS_FILE" >>"$TEMP_FILE"
    pfsdeb "$BUNDLE" >>"$TEMP_FILE-pfsdeb_output"
done

if [ -f "$CHANGES/var/.minios-setup-completed" ]; then
    # Append CHANGES's dpkg status file to the temporary file and append its pfsdeb output to another temporary file
    cat "$CHANGES$DPKG_STATUS_FILE" >>"$TEMP_FILE"
    pfsdeb "$CHANGES" >>"$TEMP_FILE-pfsdeb_output"
fi

# Sort and uniquify pfsdeb output from core bundle and other bundles into separate temporary files, then use comm to find lines unique to other bundles and write them to another temporary file.
pfsdeb "$CORE_BUNDLE_PATH" | sort -u >>"$TEMP_FILE-core_bundle_pfsdeb_output"
sort -u "$TEMP_FILE-pfsdeb_output" >"$TEMP_FILE-sorted_pfsdeb_output"
comm -1 -3 "$TEMP_FILE-core_bundle_pfsdeb_output" "$TEMP_FILE-sorted_pfsdeb_output" >"$TEMP_FILE-unique_pfsdeb_output"

# For each package that is unique to other bundles (not in core bundle), append its information from the temporary file (containing concatenated dpkg status files) to the system dpkg status file.
for PACKAGE in $(sort -u "$TEMP_FILE-unique_pfsdeb_output" | sed 's/+/\\\+/g'); do
    awk '/^Package: '$PACKAGE'$/ {p=1} p==1 {print} /^$/ {if (p==1) exit}' "$TEMP_FILE" >>$DPKG_STATUS_FILE
done

exit
