#!/bin/bash
#
# Ð¡ommand line parsing script.
# Author: crims0n. <http://minios.dev>
#

. /usr/lib/minioslib || exit 1

console_colors
allow_root_only

if [ ! -d /var/log/minios ]; then
    mkdir -p /var/log/minios
fi
exec 19>/var/log/minios/startup.log
BASH_XTRACEFD=19
set -x

# Variables
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
CMDLINE=$(cat /proc/cmdline)
CONFIG=/etc/minios/config
BUILDCONFIG=/etc/minios/buildconfig
read_cmdline $CMDLINE
if [ "$STATIC_PROFILES" = "true" ]; then
    exit 0
fi
if [ -f $CONFIG ]; then
    read_config $CONFIG LIVEKITNAME
else
    LIVEKITNAME="minios"
fi

if [ -d /run/initramfs/memory/bundles ]; then
    BUNDLES=/run/initramfs/memory/bundles
    INITRD_TYPE="livekit"
elif [ -d /memory/bundles ]; then
    BUNDLES=/memory/bundles
    INITRD_TYPE="uird"
fi
if [ -n $SFLAGS ] && [ -z $FLAGS ]; then
    FLAGS=$SFLAGS
fi
CORE_BUNDLE_PREFIX=00-
BEXT=sb
if [ "$INITRD_TYPE" = "livekit" ]; then
    if [ "$FLAGS" = "toram" ]; then
        MEDIA="/run/initramfs/memory/toram"
    else
        MEDIA="/run/initramfs/memory/data/$LIVEKITNAME"
    fi
elif [ "$INITRD_TYPE" = "uird" ]; then
    MEDIA="/memory/data/from/0/$LIVEKITNAME"
fi
if id -nu 1000 2>/dev/null; then
    CURRENT_USER_NAME=$(id -nu 1000)
    CURRENT_USER_GROUP=$(id -ng 1000)
fi

# Comparison of configuration files on the media and in the system
touch "$MEDIA/.empty" 2>/dev/null && rm -f "$MEDIA/.empty" 2>/dev/null
if [ $? -ne 0 ]; then
    WRITABLE="false"
    if [ -z $SSH_KEY ]; then
        SSH_KEY="authorized_keys"
    fi
    if [ -f $MEDIA/$LIVEKITNAME.conf ]; then
        if [ ! -f /etc/minios/$LIVEKITNAME.conf ]; then
            cp -fp $MEDIA/$LIVEKITNAME.conf /etc/minios/$LIVEKITNAME.conf
        fi
    fi
    if [ -f $MEDIA/$SSH_KEY ]; then
        if [ ! -d /root/.ssh ]; then
            mkdir /root/.ssh
            chmod 700 /root/.ssh
            cp -fp $MEDIA/$SSH_KEY /root/.ssh/authorized_keys
            chmod 600 /root/.ssh/authorized_keys
        fi
    fi
else
    WRITABLE="true"
    if [ -d $MEDIA ]; then
        if [ -f $MEDIA/$LIVEKITNAME.conf ] && [ -f /etc/minios/$LIVEKITNAME.conf ]; then
            if [ "$MEDIA/$LIVEKITNAME.conf" -nt "/etc/minios/$LIVEKITNAME.conf" ]; then
                cp -fp $MEDIA/$LIVEKITNAME.conf /etc/minios/$LIVEKITNAME.conf
            elif [ "$MEDIA/$LIVEKITNAME.conf" -ot "/etc/minios/$LIVEKITNAME.conf" ]; then
                cp -fp /etc/minios/$LIVEKITNAME.conf $MEDIA/$LIVEKITNAME.conf
            fi
        elif [ -f $MEDIA/$LIVEKITNAME.conf ]; then
            cp -fp $MEDIA/$LIVEKITNAME.conf /etc/minios/$LIVEKITNAME.conf
        elif [ -f /etc/minios/$LIVEKITNAME.conf ]; then
            cp -fp /etc/minios/$LIVEKITNAME.conf $MEDIA/$LIVEKITNAME.conf
        fi
        if [ -z $SSH_KEY ]; then
            SSH_KEY=$(read_config_value /etc/minios/$LIVEKITNAME.conf SSH_KEY)
            if [ -z $SSH_KEY ]; then
                SSH_KEY="authorized_keys"
            fi
        fi
        if [ ! -d /root/.ssh ]; then
            mkdir /root/.ssh
            chmod 700 /root/.ssh
        fi
        if [ -f $MEDIA/$SSH_KEY ] && [ -f /root/.ssh/authorized_keys ]; then
            if [ "$MEDIA/$SSH_KEY" -nt "/root/.ssh/authorized_keys" ]; then
                cp -fp $MEDIA/$SSH_KEY /root/.ssh/authorized_keys
                chmod 600 /root/.ssh/authorized_keys
            elif [ "$MEDIA/$SSH_KEY" -ot "/root/.ssh/authorized_keys" ]; then
                cp -fp /root/.ssh/authorized_keys $MEDIA/$SSH_KEY
            fi
        elif [ -f $MEDIA/$SSH_KEY ]; then
            cp -fp $MEDIA/$SSH_KEY /root/.ssh/authorized_keys
            chmod 600 /root/.ssh/authorized_keys
        elif [ -f /root/.ssh/authorized_keys ]; then
            cp -fp /root/.ssh/authorized_keys $MEDIA/$SSH_KEY
        fi
    fi
fi
if [ "$WRITABLE" = "true" ]; then
    if [ -f /etc/minios/$LIVEKITNAME.conf ]; then
        cp -fp /etc/minios/$LIVEKITNAME.conf $MEDIA/$LIVEKITNAME.conf
    fi
    if [ -f /root/.ssh/authorized_keys ]; then
        cp -fp /root/.ssh/authorized_keys $MEDIA/$SSH_KEY
    fi
fi

# Copying bootloader configuration files to the system
if [ -f $MEDIA/boot/grub/grub.cfg ]; then
    cp -fp $MEDIA/boot/grub/grub.cfg /etc/$LIVEKITNAME/grub.cfg
fi
cp -fp $MEDIA/boot/syslinux.cfg /etc/$LIVEKITNAME/syslinux.cfg

echo "Original /etc/minios/$LIVEKITNAME.conf configuration file contents:"
cat /etc/minios/$LIVEKITNAME.conf
echo ""

cat <<EOF >/etc/issue


                                                                          \\l





                        Thank you for using MiniOS.
EOF

if [ -f $BUILDCONFIG ]; then
    read_config $BUILDCONFIG DISTRIBUTION DESKTOP_ENVIRONMENT
    if [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ] || [ $DISTRIBUTION = "bookworm" ] || [ $DISTRIBUTION = "kali-rolling" ] || [ $DISTRIBUTION = "sid" ] || [ $DISTRIBUTION = "orel" ]; then
        DISTRIBUTION_TYPE="debian"
    elif [ $DISTRIBUTION = "bionic" ] || [ $DISTRIBUTION = "focal" ] || [ $DISTRIBUTION = "jammy" ]; then
        DISTRIBUTION_TYPE="ubuntu"
    fi
    if [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
        cat <<EOF >>/etc/issue
                        Based on [1;33mUbuntu[0;29m.
EOF
    elif [ $DISTRIBUTION_TYPE = "debian" ] && [ $DISTRIBUTION = "kali-rolling" ]; then
        cat <<EOF >>/etc/issue
                        Based on [1;36mKali Linux[0;29m.
EOF
    elif [ $DISTRIBUTION_TYPE = "debian" ] && [ $DISTRIBUTION = "orel" ]; then
        cat <<EOF >>/etc/issue
                        Based on [1;34mAstra Linux[0;29m.
EOF
    elif [ $DISTRIBUTION_TYPE = "debian" ] && [ $DISTRIBUTION != "kali-rolling" ]; then
        cat <<EOF >>/etc/issue
                        Based on [1;31mDebian GNU/Linux[0;29m.
EOF
    else
        cat <<EOF >>/etc/issue
                        Based on [1;31mDebian GNU/Linux[0;29m.
EOF
    fi
    if [ $DESKTOP_ENVIRONMENT = "flux" ]; then
        cat <<EOF >>/etc/issue
                        Powered by [1;32mSlax[0;29m.
EOF
    fi
else
    cat <<EOF >>/etc/issue
                        Based on [1;31mDebian GNU/Linux[0;29m.
EOF
fi

cat <<EOF >>/etc/issue

    [1;1m::::    ::::  ::::::::::: ::::    ::: ::::::::::: ::::::::   ::::::::  [0;29m
    [1;1m+:+:+: :+:+:+     :+:     :+:+:   :+:     :+:    :+:    :+: :+:    :+: [0;29m
    [1;1m+:+ +:+:+ +:+     +:+     :+:+:+  +:+     +:+    +:+    +:+ +:+        [0;29m
    [1;1m+#+  +:+  +#+     +#+     +#+ +:+ +#+     +#+    +#+    +:+ +#++:++#++ [0;29m
    [1;1m+#+       +#+     +#+     +#+  +#+#+#     +#+    +#+    +#+        +#+ [0;29m
    [1;1m#+#       #+#     #+#     #+#   #+#+#     #+#    #+#    #+# #+#    #+# [0;29m
    [1;1m###       ### ########### ###    #### ########### ########   ########  [0;29m 

EOF

# Reading variables
if [ -z "$USER_NAME" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf USER_NAME
    if [ -z "$USER_NAME" ]; then
        USER_NAME="live"
    fi
fi
if [ -z "$USER_PASSWORD" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf USER_PASSWORD
    if [ -z "$USER_PASSWORD" ]; then
        USER_PASSWORD="evil"
    fi
fi
if [ -z "$ROOT_PASSWORD" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf ROOT_PASSWORD
    if [ -z "$ROOT_PASSWORD" ]; then
        ROOT_PASSWORD="toor"
    fi
fi
if [ -z "$HOST_NAME" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf HOST_NAME
    if [ -z "$HOST_NAME" ]; then
        HOST_NAME="minios"
    fi
fi
if [ -z "$DEFAULT_TARGET" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf DEFAULT_TARGET
    if [ -z "$DEFAULT_TARGET" ]; then
        DEFAULT_TARGET="graphical"
    fi
fi
if [ -z "$SSH_KEY" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf SSH_KEY
    if [ -z "$SSH_KEY" ]; then
        SSH_KEY="authorized_keys"
    fi
fi
if [ -z "$CLOUD" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf CLOUD
    if [ -z "$CLOUD" ]; then
        CLOUD="false"
    fi
fi
if [ -z "$SCRIPTS" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf SCRIPTS
    if [ -z "$SCRIPTS" ]; then
        SCRIPTS="true"
    fi
fi
if [ -z "$HIDE_CREDENTIALS" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf HIDE_CREDENTIALS
    if [ -z "$HIDE_CREDENTIALS" ]; then
        HIDE_CREDENTIALS="false"
    fi
fi
if [ -z "$AUTOLOGIN" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf AUTOLOGIN
    if [ -z "$AUTOLOGIN" ]; then
        AUTOLOGIN="true"
    fi
fi
if [ -z "$SYSTEM_TYPE" ]; then
    read_config /etc/minios/$LIVEKITNAME.conf SYSTEM_TYPE
    if [ -z "$SYSTEM_TYPE" ]; then
        SYSTEM_TYPE="puzzle"
    fi
fi

if [[ "$SYSTEM_TYPE" != "classic" && "$SYSTEM_TYPE" != "puzzle" ]]; then
    echo "SYSTEM_TYPE must be either classic or puzzle"
    exit 1
fi

if [ "$SYSTEM_TYPE" = "puzzle" ]; then
    # fix users
    minios-update-users $BUNDLES #&
    # fix caches
    minios-update-cache $BUNDLES &
    # fix dpkg
    minios-update-dpkg $BUNDLES &
fi

# Set up user 'root'
if [ ! -f /var/.minios-setup-completed ]; then
    cp -rT /etc/skel /root
    # create root directories
    if [ -d /root ]; then
        for dir in Desktop Documents Downloads Music Pictures Public Templates Videos; do
            mkdir -p /root/$dir
        done
    fi
    chown 0:0 /root
    chown -R 0:0 /root
    sed -i 's,01;32m,01;31m,g' /root/.bashrc
fi

if [ -f /usr/bin/x11vnc ]; then
    x11vnc -storepasswd "$ROOT_PASSWORD" /etc/vncpassword
fi

#sed -i -e "/CLOUD=/s/=.*/=$CLOUD/" /etc/minios/$LIVEKITNAME.conf
if [ "$CLOUD" != "true" ]; then
    if [ "$USER_NAME" != "root" ]; then
        echo "User name is $USER_NAME"
        # Set up user
        #USER_NAME="live"
        #USER_GROUP="live"
        USER_GROUP=$USER_NAME
        if [ ! -f /var/.minios-setup-completed ]; then
            adduser --uid 1000 --gecos '' $USER_NAME --disabled-password
            usermod -a -G sudo $USER_NAME
            if [ ! -f /usr/bin/pulseaudio ]; then
                usermod -a -G audio $USER_NAME
            fi
            cp -rT /etc/skel /home/$USER_NAME
            # create user directories
            if [ -d /home/$USER_NAME ]; then
                for dir in Desktop Documents Downloads Music Pictures Public Templates Videos; do
                    mkdir -p /home/$USER_NAME/$dir
                done
                if [ ! -d /home/$USER_NAME/.ssh ]; then
                    mkdir /home/$USER_NAME/.ssh
                    chmod 700 /home/$USER_NAME/.ssh
                fi
                if [ -f /root/.ssh/authorized_keys ]; then
                    cp /root/.ssh/authorized_keys /home/$USER_NAME/.ssh/authorized_keys
                fi
                USER_ID=$(id -u $USER_NAME)
                GROUP_ID=$(id -g $USER_NAME)
                chown $USER_ID:$GROUP_ID /home/$USER_NAME
                chown -R $USER_ID:$GROUP_ID /home/$USER_NAME
            fi
        elif [ -n $CURRENT_USER_NAME ] && [ "$USER_NAME" != "$CURRENT_USER_NAME" ]; then
            usermod -l $USER_NAME $CURRENT_USER_NAME
            usermod -m -d /home/$USER_NAME $USER_NAME
            groupmod -n $USER_GROUP $CURRENT_USER_GROUP
        fi
    fi
else
    USER_NAME="root"
    DEFAULT_TARGET="multi-user"
fi

# Set up password for root
echo root:$ROOT_PASSWORD | chpasswd
if [ "$USER_NAME" != "root" ]; then
    # Set up password for user
    echo $USER_NAME:$USER_PASSWORD | chpasswd
fi

if [ "$USER_NAME" != "root" ]; then
    cat <<EOF >/etc/sudoers.d/90-minios
# live user is default user in minios.
# It needs passwordless sudo functionality.
$USER_NAME ALL=(ALL) NOPASSWD:ALL
EOF
fi

if [ "$HIDE_CREDENTIALS" != "true" ]; then
    echo "HIDE_CREDENTIALS is $HIDE_CREDENTIALS"
    if [ "$CLOUD" != "true" ]; then
        if [ "$USER_NAME" != "root" ]; then
            cat <<EOF >>/etc/issue
                        Root login name: [1;33mroot[0;29m
                        Password: [1;33m$ROOT_PASSWORD[0;29m
                        User login name: [1;33m$USER_NAME[0;29m
                        Password: [1;33m$USER_PASSWORD[0;29m





EOF
        else
            cat <<EOF >>/etc/issue
                        Root login name: [1;33mroot[0;29m
                        Password: [1;33m$ROOT_PASSWORD[0;29m







EOF
        fi
    else
        cat <<EOF >>/etc/issue
                        User login name set by
                        cloud-init. You must use
                        your ssh key to login.
                        Root login name: [1;33mroot[0;29m
                        Password: [1;33m$ROOT_PASSWORD[0;29m






EOF
    fi
else
    cat <<EOF >>/etc/issue









EOF
fi

if [ "$CLOUD" != "true" ]; then
    if [ -n "$HOST_NAME" ]; then
        echo $HOST_NAME >/etc/hostname
        cat <<EOF >/etc/hosts
127.0.0.1       localhost $HOST_NAME
::1             localhost ip6-localhost ip6-loopback $HOST_NAME
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters

EOF
    fi
fi

echo "=====> Making changes to the configuration file..."
echo "Changes:"

update_config_value() {
    local CONFIG_VALUE=$(read_config_value /etc/minios/$LIVEKITNAME.conf $1)
    local VAR_NAME=$1
    local VAR_VALUE=${!VAR_NAME}
    if [ "$VAR_VALUE" != "$CONFIG_VALUE" ] && [ -n "$VAR_VALUE" ]; then
        sed -i -e "/$1=/s/=.*/=\"$VAR_VALUE\"/" /etc/minios/$LIVEKITNAME.conf
    fi
}

for PARAM in USER_NAME USER_PASSWORD ROOT_PASSWORD HOST_NAME DEFAULT_TARGET ENABLE_SERVICES DISABLE_SERVICES SSH_KEY SCRIPTS CLOUD AUTOLOGIN HIDE_CREDENTIALS INITRD_TYPE SYSTEM_TYPE; do
    update_config_value $PARAM
done

echo "
New /etc/minios/$LIVEKITNAME.conf configuration file contents:"
cat /etc/minios/$LIVEKITNAME.conf
echo ""

# If newer kernels are used, then xorg will not run on hyper-v without this configuration file.
read_config $BUILDCONFIG DISTRIBUTION DISTRIBUTION_TYPE KERNEL_BPO KERNEL_AUFS
if ([ "$DISTRIBUTION" = "bookworm" ] || [ "$DISTRIBUTION" = "kali-rolling" ] || [ "$DISTRIBUTION" = "sid" ]) || ([ "$DISTRIBUTION" = "bullseye" ] && [ $KERNEL_BPO = "true" ]) || ([ $DISTRIBUTION_TYPE = "ubuntu" ] && [ $KERNEL_AUFS = "true" ]); then
    if [ "$(virt-what)" = "hyperv" ]; then
        if [ ! -d /etc/X11/xorg.conf.d ]; then
            mkdir -p /etc/X11/xorg.conf.d
        fi
        cat <<EOF >/etc/X11/xorg.conf.d/30-hyperv.conf
Section "Device"
    Identifier  "HYPER-V Framebuffer"
    Driver      "fbdev"
EndSection

EOF
    fi
fi
if [ "$AUTOLOGIN" = "true" ]; then
    if [ -f /etc/default/nodm ]; then
        #sed -i "s/NODM_USER=live/NODM_USER=$USER_NAME/g" /etc/default/nodm
        sed -i -e "/NODM_USER=/s/=.*/=\"$USER_NAME\"/" /etc/default/nodm
    fi
    if [ -f /etc/slim.conf ]; then
        #sed -i "s/#default_user        simone/default_user        $USER_NAME/g" /etc/slim.conf
        sed -i -e "/default_user /s/ .*/ $USER_NAME/" /etc/slim.conf
        sed -i -e "/auto_login /s/ .*/ yes/" /etc/slim.conf
    fi
    if [ -f /etc/lightdm/lightdm.conf ]; then
        sed -i "s/#autologin-user=/autologin-user=/g" /etc/lightdm/lightdm.conf
        sed -i -e "/autologin-user=/s/=.*/=$USER_NAME/" /etc/lightdm/lightdm.conf
        sed -i "s/#autologin-user-timeout=/autologin-user-timeout=/g" /etc/lightdm/lightdm.conf
        sed -i -e "/autologin-user-timeout=/s/=.*/=0/" /etc/lightdm/lightdm.conf
    fi
else
    if [ -f /etc/default/nodm ]; then
        sed -i -e "/NODM_USER=/s/=.*/=\"\"/" /etc/default/nodm
    fi
    if [ -f /etc/slim.conf ]; then
        #sed -i "s/#default_user        simone/default_user        $USER_NAME/g" /etc/slim.conf
        sed -i -e "/default_user /s/ .*/ /" /etc/slim.conf
        sed -i -e "/auto_login /s/ .*/ no/" /etc/slim.conf
    fi
    if [ -f /etc/lightdm/lightdm.conf ]; then
        if ! grep -q "#autologin-user=" /etc/lightdm/lightdm.conf; then
            sed -i "s/autologin-user=/#autologin-user=/g" /etc/lightdm/lightdm.conf
        fi
        if ! grep -q "#autologin-user-timeout=" /etc/lightdm/lightdm.conf; then
            sed -i "s/autologin-user-timeout=/#autologin-user-timeout=/g" /etc/lightdm/lightdm.conf
        fi
    fi
fi
##### Software configuration #####
# Setup Firefox
if [ -d /usr/share/minios/html ] && [ -f /usr/share/firefox-esr/browser/defaults/preferences/firefox-branding.js ]; then
    /usr/sbin/minios-firefox-patch
fi

if [ ! -f /var/.minios-setup-completed ]; then
    echo "MiniOS setup is completed." >/var/.minios-setup-completed
fi

exit 0
