#!/bin/bash

set -e          # exit on error
set -o pipefail # exit on pipeline error
set -u          # treat unset variable as error

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

apt-get update >>$OUTPUT 2>&1

if [ $DISTRIBUTION_TYPE = "debian" ]; then
    if [ $PACKAGE_VARIANT = "maximum" ] || [ $PACKAGE_VARIANT = "ultra" ]; then
        wget http://mxrepo.com/mx/repo/pool/main/m/mx-archive-keyring/mx-archive-keyring_2018.2mx17_all.deb
        wget http://mxrepo.com/mx/repo/pool/main/m/mx19-archive-keyring/mx19-archive-keyring_2020.4.29_all.deb
        wget http://mxrepo.com/mx/repo/pool/main/m/mx21-archive-keyring/mx21-archive-keyring_2021.2.19_all.deb
        wget http://mxrepo.com/mx/repo/pool/main/a/antix-archive-keyring/antix-archive-keyring_20019.3.14_all.deb
        wget http://mxrepo.com/mx/repo/pool/main/a/antix-archive-keyring/antix-archive-keyring_20019.3.13~mx15_all.deb
        apt-get install -y ./*.deb
        rm ./*.deb
        if [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ]; then
            cat <<EOF >/etc/apt/sources.list.d/mx.list
# MX Community Main and Test Repos
deb http://mxrepo.com/mx/repo/ $DISTRIBUTION main non-free
#deb http://mxrepo.com/mx/testrepo/ $DISTRIBUTION test

#ahs hardware stack repo
deb http://mxrepo.com/mx/repo/ $DISTRIBUTION ahs
EOF
        elif [ $DISTRIBUTION = "bookworm" ]; then
            cat <<EOF >/etc/apt/sources.list.d/antix.list
deb http://ftp.debian.ru/mirrors/MX-Linux/MX-Packages/antix/testing/ testing main nonfree
EOF
        elif [ $DISTRIBUTION = "sid" ]; then
            cat <<EOF >/etc/apt/s
            ources.list.d/antix.list
deb http://ftp.debian.ru/mirrors/MX-Linux/MX-Packages/antix/$DISTRIBUTION/ $DISTRIBUTION main nonfree
EOF
        fi
        apt-get update >>$OUTPUT 2>&1
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            virtualbox-guest-utils >>$OUTPUT 2>&1
        if [ -f /etc/apt/sources.list.d/mx.list ]; then
            rm /etc/apt/sources.list.d/mx.list
        fi
        if [ -f /etc/apt/sources.list.d/antix.list ]; then
            rm /etc/apt/sources.list.d/antix.list
        fi
    fi
fi

if [ $DISTRIBUTION_TYPE = "debian" ]; then
    if [ $DISTRIBUTION = "bullseye" ] && [ $KERNEL_ARCH = "amd64" ] && [ $KERNEL_TYPE = "pve" ]; then
        wget http://download.proxmox.com/debian/proxmox-release-bullseye.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg
        echo "deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription" >/etc/apt/sources.list.d/pve-install-repo.list
        apt-get update >>$OUTPUT 2>&1 &&
            apt-get full-upgrade -y >>$OUTPUT 2>&1
        KERNEL_IMAGE=$(apt-cache depends pve-kernel-5.15 | grep -m 2 'Depends:' | tail -n1 | sed 's/  Depends: //g')
    elif [ $DISTRIBUTION = "orel" ]; then
        KERNEL_IMAGE="$(apt-cache depends linux-image-5.10-generic | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
    elif [ $KERNEL_TYPE = "rt" ] || [ $KERNEL_TYPE = "cloud" ]; then
        KERNEL_IMAGE="linux-image-$KERNEL_TYPE-$KERNEL_ARCH"
    elif [ $KERNEL_AUFS = "true" ] && ! { [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ]; }; then
        echo "do nothing"
    else
        KERNEL_IMAGE="linux-image-$KERNEL_ARCH"
    fi
elif [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
    if [ $UBUNTU_IMAGE_HWE = "true" ]; then
        if [ $DISTRIBUTION = "xenial" ]; then
            KERNEL_IMAGE="$(apt-cache depends linux-image-generic-hwe-16.04 | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
        elif [ $DISTRIBUTION = "bionic" ]; then
            KERNEL_IMAGE="$(apt-cache depends linux-image-generic-hwe-18.04 | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
        elif [ $DISTRIBUTION = "focal" ]; then
            KERNEL_IMAGE="$(apt-cache depends linux-image-generic-hwe-20.04 | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
        fi
    else
        KERNEL_IMAGE="$(apt-cache depends linux-image-generic | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
    fi
fi

if [ $KERNEL_TYPE != "none" ]; then
    if [ $KERNEL_BPO = "true" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y -t $DISTRIBUTION-backports $KERNEL_IMAGE >>$OUTPUT 2>&1
    elif [ $KERNEL_AUFS = "true" ] && [ $KERNEL_BPO != "true" ] && ! { [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ]; }; then
        wget https://github.com/minios-linux/aufs-kernel/releases/download/$KERNEL/linux-image-$KERNEL\_$KERNEL-1_$DISTRIBUTION_ARCH.deb
        wget https://github.com/minios-linux/aufs-kernel/releases/download/$KERNEL/linux-headers-$KERNEL\_$KERNEL-1_$DISTRIBUTION_ARCH.deb
        apt-get install -y ./linux-image-$KERNEL\_$KERNEL-1_$DISTRIBUTION_ARCH.deb
        apt-get install -y ./linux-headers-$KERNEL\_$KERNEL-1_$DISTRIBUTION_ARCH.deb
        rm ./linux-*.deb
    else
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y $KERNEL_IMAGE >>$OUTPUT 2>&1
    fi
    if [ $KERNEL_AUFS = "true" ] && ! { [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ]; }; then
        DEBIAN_FRONTEND=noninteractive \
            apt-mark hold linux-image-$KERNEL >>$OUTPUT 2>&1
    else
        DEBIAN_FRONTEND=noninteractive \
            apt-mark hold $KERNEL_IMAGE >>$OUTPUT 2>&1
    fi
fi
