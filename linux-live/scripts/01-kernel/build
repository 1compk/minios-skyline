#!/bin/bash

set -e          # exit on error
set -o pipefail # exit on pipeline error
set -u          # treat unset variable as error

install_build_packages() {
    local headers_package=$1
    DEBIAN_FRONTEND=noninteractive \
        apt-get $INSTALL_OPTIONS update >>$OUTPUT 2>&1
    DEBIAN_FRONTEND=noninteractive \
        apt-get $INSTALL_OPTIONS install $headers_package gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
}

source_dkms_install() {
    local DRIVER_NAME DRIVER_VERSION
    cd /usr/src
    git clone $1 >>$OUTPUT 2>&1
    DRIVER_NAME=$(basename $1 | sed 's/\.git$//')
    DRIVER_VERSION=$(cat $DRIVER_NAME/dkms.conf | grep 'PACKAGE_VERSION=' | cut -d '"' -f 2)
    sed -i "s/uname -r/echo $KERNEL/g" $DRIVER_NAME/Makefile
    sed -i "s/uname -m/echo $DISTRIBUTION_ARCH/g" $DRIVER_NAME/Makefile
    sed -i "s/-v \$(DRIVER_VERSION)/-v \$(DRIVER_VERSION) -k $KERNEL/g" $DRIVER_NAME/Makefile
    sed -i "s/\${kernelver}/$KERNEL/g" $DRIVER_NAME/dkms.conf
    mv $DRIVER_NAME $DRIVER_NAME-$DRIVER_VERSION
    for ACTION in add build install; do
        dkms $ACTION -m $DRIVER_NAME -v $DRIVER_VERSION >>$OUTPUT 2>&1
    done
    cd -
}

source_install() {
    local DRIVER_NAME DRIVER_VERSION
    git clone $1 >>$OUTPUT 2>&1
    DRIVER_NAME=$(basename $1 | sed 's/\.git$//')
    DRIVER_VERSION=$(cat $DRIVER_NAME/dkms.conf | grep 'PACKAGE_VERSION=' | cut -d '"' -f 2)
    cd $DRIVER_NAME
    sed -i "s/uname -r/echo $KERNEL/g" ./Makefile
    sed -i "s/uname -m/echo $KERNEL_BUILD_ARCH/g" ./Makefile
    sed -i "s/-v \$(DRIVER_VERSION)/-v \$(DRIVER_VERSION) -k $KERNEL/g" ./Makefile
    sed -i "s/\${kernelver}/$KERNEL/g" ./dkms.conf
    make
    make install
    cd -
}

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
if [ $DISTRIBUTION_ARCH = "amd64" ]; then
    KERNEL_BUILD_ARCH="x86_64"
elif [ $DISTRIBUTION_ARCH = "i386" ]; then
    KERNEL_BUILD_ARCH="i386"
fi

if [ $KERNEL_BPO = "true" ] && ([ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ] | [ $DISTRIBUTION = "bookworm" ]); then
    BPO="-t $DISTRIBUTION-backports"
else
    BPO=""
fi
if [ $KERNEL_AUFS = "true" ] && ! { [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "orel" ]; }; then
    if [ $KERNEL_TYPE = "default" ]; then
        KERNEL=$(apt-cache depends linux-image-$KERNEL_VERSION-mos-$KERNEL_ARCH | grep 'Depends' | sed 's/  Depends: //g' | sed 's/linux-image-//')
    else
        KERNEL=$(apt-cache depends linux-image-$KERNEL_VERSION-mos-$KERNEL_TYPE-$KERNEL_ARCH | grep 'Depends' | sed 's/  Depends: //g' | sed 's/linux-image-//')
    fi
elif [ -f /usr/bin/dpkg-query ] 2>/dev/null; then
    KERNEL=$(dpkg-query -W -f='${binary:Package}\n' linux-image-* | head -n 1 | sed 's/linux-image-//')
else
    KERNEL=$(uname -r)
fi
echo "KERNEL=$KERNEL" >/miniosbuild.conf

if [ $DISTRIBUTION_ARCH = "amd64" ] && [ $DISTRIBUTION = "orel" ]; then
    DISTRIBUTION_ARCH="x86_64"
fi

if [ "$KERNEL_BUILD_DKMS" = "false" ]; then
    if ([ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ]) && ([ $KERNEL_AUFS = "true" ] && [ $KERNEL_BPO = "false" ]); then
        apt-get $INSTALL_OPTIONS update >>$OUTPUT 2>&1
        install_build_packages "$BPO linux-headers-$KERNEL_ARCH"
        apt-get $INSTALL_OPTIONS install $BPO aufs-dkms >>$OUTPUT 2>&1
    fi
elif [ "$KERNEL_BUILD_DKMS" = "true" ]; then
    case $DISTRIBUTION_TYPE in
    "debian")
        case $DISTRIBUTION in
        "orel")
            install_build_packages "linux-headers-$KERNEL"
            ;;
        "stretch" | "buster")
            if [ $KERNEL_AUFS = "true" ] && [ $KERNEL_BPO != "true" ]; then
                install_build_packages "linux-headers-$KERNEL_ARCH"
                apt-get $INSTALL_OPTIONS install aufs-dkms >>$OUTPUT 2>&1
            elif [ $KERNEL_AUFS = "true" ] && [ $KERNEL_BPO = "true" ]; then
                if [ $KERNEL_TYPE = "default" ]; then
                    install_build_packages "linux-headers-$KERNEL_VERSION-mos-$KERNEL_ARCH"
                else
                    install_build_packages "linux-headers-$KERNEL_VERSION-mos-$KERNEL_TYPE-$KERNEL_ARCH"
                fi
            else
                if [ $KERNEL_TYPE = "default" ]; then
                    install_build_packages "$BPO linux-headers-$KERNEL_ARCH"
                else
                    install_build_packages "$BPO linux-headers-$KERNEL_TYPE-$KERNEL_ARCH"
                fi
            fi
            ;;
        *)
            if [ $KERNEL_AUFS = "true" ]; then
                if [ $KERNEL_TYPE = "default" ]; then
                    install_build_packages "linux-headers-$KERNEL_VERSION-mos-$KERNEL_ARCH"
                else
                    install_build_packages "linux-headers-$KERNEL_VERSION-mos-$KERNEL_TYPE-$KERNEL_ARCH"
                fi
            else
                if [ $KERNEL_TYPE = "default" ]; then
                    install_build_packages "$BPO linux-headers-$KERNEL_ARCH"
                else
                    install_build_packages "$BPO linux-headers-$KERNEL_TYPE-$KERNEL_ARCH"
                fi
            fi
            ;;
        esac
        ;;
    "ubuntu")
        if [ $KERNEL_AUFS = "true" ]; then
            if [ $KERNEL_TYPE = "default" ]; then
                install_build_packages "linux-headers-$KERNEL_VERSION-mos-$KERNEL_ARCH"
            else
                install_build_packages "linux-headers-$KERNEL_VERSION-mos-$KERNEL_TYPE-$KERNEL_ARCH"
            fi
        else
            install_build_packages "linux-headers-$KERNEL"
        fi
        ;;
    esac

    apt-get $INSTALL_OPTIONS install $BPO broadcom-sta-dkms >>$OUTPUT 2>&1

    if ([ $PACKAGE_VARIANT = "maximum" ] || [ $PACKAGE_VARIANT = "ultra" ] || [ $PACKAGE_VARIANT = "puzzle" ]) && [ $DISTRIBUTION_ARCH = "amd64" ] && ! { [ $KERNEL_AUFS = "true" ] && [ $KERNEL_BPO = "true" ] && ([ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ]); }; then
        echo "zfs-dkms        zfs-dkms/note-incompatible-licenses     note" | debconf-set-selections -v >>$OUTPUT 2>&1
        apt-get $INSTALL_OPTIONS install $BPO zfs-dkms >>$OUTPUT 2>&1
    fi
    if [ $DISTRIBUTION = "kali-rolling" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get $INSTALL_OPTIONS install \
            realtek-rtl88xxau-dkms \
            realtek-rtl8814au-dkms \
            realtek-rtl8188eus \
            realtek-rtl8723cs-dkms \
            >>$OUTPUT 2>&1
    elif [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || ([ $DISTRIBUTION = "bullseye" ] && [ $KERNEL_BPO != "true" ]); then
        DEBIAN_FRONTEND=noninteractive \
            apt-get $INSTALL_OPTIONS install \
            realtek-rtl8723cs-dkms \
            realtek-rtl88xxau-dkms \
            rtl8821ce-dkms \
            rtl8821cu-dkms \
            >>$OUTPUT 2>&1
    elif [ $DISTRIBUTION = "bullseye" ] && [ $KERNEL_BPO = "true" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get $INSTALL_OPTIONS install \
            realtek-rtl8723cs-dkms \
            rtl8821ce-dkms \
            >>$OUTPUT 2>&1
    elif [ $DISTRIBUTION = "bookworm" ]; then
        DEBIAN_FRONTEND=noninteractive
        apt-get $INSTALL_OPTIONS install \
            realtek-rtl8188eus-dkms \
            realtek-rtl8814au-dkms \
            realtek-rtl88xxau-dkms \
            rtl8821cu-dkms \
            >>$OUTPUT 2>&1
        source_install https://github.com/cilynx/rtl88x2bu.git
    elif [ $DISTRIBUTION = "sid" ] && [ $KERNEL_BPO != "true" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get $INSTALL_OPTIONS install \
            realtek-rtl88xxau-dkms \
            realtek-rtl8814au-dkms \
            realtek-rtl8188eus \
            realtek-rtl8723cs-dkms \
            >>$OUTPUT 2>&1
    elif [ $DISTRIBUTION = "sid" ] && [ $KERNEL_BPO = "true" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get $INSTALL_OPTIONS install \
            realtek-rtl88xxau-dkms \
            realtek-rtl8814au-dkms \
            realtek-rtl8188eus \
            realtek-rtl8723cs-dkms \
            >>$OUTPUT 2>&1
    else
        DEBIAN_FRONTEND=noninteractive
        apt-get $INSTALL_OPTIONS install \
            realtek-rtl8188eus-dkms \
            realtek-rtl8723cs-dkms \
            realtek-rtl8814au-dkms \
            realtek-rtl88xxau-dkms \
            rtl8821cu-dkms \
            >>$OUTPUT 2>&1
        source_install https://github.com/cilynx/rtl88x2bu.git
    fi
    if ! [[ $DISTRIBUTION =~ ^(kali-rolling|sid|bookworm)$ ]] && ! ([[ $KERNEL_AUFS = "true" ]] && [[ $DISTRIBUTION = "stretch" ]]); then
        cd /usr/src
        DRIVER_VERSION=""
        git clone https://github.com/cilynx/rtl88x2bu
        DRIVER_VERSION=$(cat rtl88x2bu/dkms.conf | grep 'PACKAGE_VERSION=' | cut -d '"' -f 2)
        mv rtl88x2bu rtl88x2bu-$DRIVER_VERSION
        for ACTION in add build install; do
            dkms $ACTION -m rtl88x2bu -v $DRIVER_VERSION
        done
        cd -
    fi

    case $DISTRIBUTION in
    "stretch" | "buster" | "bullseye" | "bookworm")
        if [ $KERNEL_BPO != "true" ]; then
            wget http://mxrepo.com/mx/repo/pool/main/m/mx-archive-keyring/mx-archive-keyring_2018.2mx17_all.deb
            wget http://mxrepo.com/mx/repo/pool/main/m/mx19-archive-keyring/mx19-archive-keyring_2020.4.29_all.deb
            wget http://mxrepo.com/mx/repo/pool/main/m/mx21-archive-keyring/mx21-archive-keyring_2021.2.19_all.deb
            wget https://mxrepo.com/mx/repo/pool/main/m/mx23-archive-keyring/mx23-archive-keyring_2023.6.6_all.deb
            wget http://mxrepo.com/mx/repo/pool/main/a/antix-archive-keyring/antix-archive-keyring_20019.3.14_all.deb
            apt-get $INSTALL_OPTIONS install ./*.deb
            cat <<EOF >/etc/apt/sources.list.d/mx.list
# MX Community Main and Test Repos
deb http://mxrepo.com/mx/repo/ $DISTRIBUTION main non-free
#deb http://mxrepo.com/mx/testrepo/ $DISTRIBUTION test

#ahs hardware stack repo
deb http://mxrepo.com/mx/repo/ $DISTRIBUTION ahs
EOF
            apt-get $INSTALL_OPTIONS update >>$OUTPUT 2>&1
            DEBIAN_FRONTEND=noninteractive \
                apt-get $INSTALL_OPTIONS install virtualbox-guest-dkms >>$OUTPUT 2>&1
        fi
        ;;
    *)
        echo "virtualbox-guest-dkms: unsupported distribution $DISTRIBUTION"
        ;;
    esac

fi
