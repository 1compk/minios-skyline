#!/bin/bash

set -e          # exit on error
set -o pipefail # exit on pipeline error
#set -u          # treat unset variable as error

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
if [ $DISTRIBUTION_ARCH = "amd64" ]; then
    KERNEL_BUILD_ARCH="x86_64"
elif [ $DISTRIBUTION_ARCH = "i386" ]; then
    KERNEL_BUILD_ARCH="i386"
fi

if [ $KERNEL_BPO = "true" ] && ([ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ]); then
    BPO="-t $DISTRIBUTION-backports"
else
    BPO=""
fi

if [ -f /usr/bin/dpkg-query ] 2>/dev/null; then
    KERNEL=$(dpkg-query -W -f='${binary:Package}\n' linux-image-* | head -n 1 | sed 's/linux-image-//')
else
    KERNEL=$(uname -r)
fi
echo "KERNEL=$KERNEL" >/miniosbuild.conf

if [ $KERNEL_AUFS = "true" ] && [ $DISTRIBUTION = "bullseye" ]; then
    KERNEL_SUFFIX="-mos"
fi

if [ $DISTRIBUTION_ARCH = "amd64" ] && [ $DISTRIBUTION = "orel" ]; then
    DISTRIBUTION_ARCH="x86_64"
fi

if ([ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ]) && [ $KERNEL_AUFS = "true" ]; then
    apt-get update >>$OUTPUT 2>&1
    apt-get install -y $BPO linux-headers-$KERNEL_ARCH gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
    apt-get install -y $BPO aufs-dkms >>$OUTPUT 2>&1
fi
if ([ $PACKAGE_VARIANT = "maximum" ] || [ $PACKAGE_VARIANT = "ultra" ] || [ $PACKAGE_VARIANT = "frugal" ]) && [ "$KERNEL_NO_DKMS" != "true" ]; then
    wget http://mxrepo.com/mx/repo/pool/main/m/mx-archive-keyring/mx-archive-keyring_2018.2mx17_all.deb
    wget http://mxrepo.com/mx/repo/pool/main/m/mx19-archive-keyring/mx19-archive-keyring_2020.4.29_all.deb
    wget http://mxrepo.com/mx/repo/pool/main/m/mx21-archive-keyring/mx21-archive-keyring_2021.2.19_all.deb
    wget http://mxrepo.com/mx/repo/pool/main/a/antix-archive-keyring/antix-archive-keyring_20019.3.14_all.deb
    apt-get install -y ./*.deb
    if [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ]; then
        cat <<EOF >/etc/apt/sources.list.d/mx.list
# MX Community Main and Test Repos
deb http://mxrepo.com/mx/repo/ $DISTRIBUTION main non-free
#deb http://mxrepo.com/mx/testrepo/ $DISTRIBUTION test

#ahs hardware stack repo
deb http://mxrepo.com/mx/repo/ $DISTRIBUTION ahs
EOF
        cat /etc/apt/sources.list.d/mx.list
    elif [ $DISTRIBUTION = "bookworm" ]; then
        cat <<EOF >/etc/apt/sources.list.d/antix.list
deb http://ftp.debian.ru/mirrors/MX-Linux/MX-Packages/antix/testing/ testing main nonfree
EOF
    elif [ $DISTRIBUTION = "sid" ]; then
        cat <<EOF >/etc/apt/sources.list.d/antix.list
deb http://ftp.debian.ru/mirrors/MX-Linux/MX-Packages/antix/$DISTRIBUTION/ $DISTRIBUTION main nonfree
EOF
    fi
    apt-get update >>$OUTPUT 2>&1
    if [ $DISTRIBUTION_TYPE = "debian" ]; then
        if [ $DISTRIBUTION = "orel" ]; then
            DEBIAN_FRONTEND=noninteractive \
                apt-get install -y linux-headers-$KERNEL gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
        elif [ $KERNEL_AUFS = "true" ] && [ $KERNEL_BPO != "true" ]; then
            if [ $KERNEL_TYPE = "default" ]; then
                DEBIAN_FRONTEND=noninteractive \
                    apt-get install -y linux-headers$KERNEL_SUFFIX-$KERNEL_ARCH gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
            else
                DEBIAN_FRONTEND=noninteractive \
                    apt-get install -y linux-headers$KERNEL_SUFFIX-$KERNEL_TYPE-$KERNEL_ARCH gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
            fi
        elif [ $KERNEL_AUFS = "true" ] && [ $KERNEL_BPO = "true" ] && [ $DISTRIBUTION = "bullseye" ]; then
            if [ $KERNEL_TYPE = "default" ]; then
                DEBIAN_FRONTEND=noninteractive \
                    apt-get install -y linux-headers-$KERNEL gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
            else
                DEBIAN_FRONTEND=noninteractive \
                    apt-get install -y linux-headers-$KERNEL gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
            fi
        elif [ $KERNEL_AUFS = "true" ] && [ $KERNEL_BPO = "true" ]; then
            if [ $KERNEL_TYPE = "default" ]; then
                wget https://github.com/minios-linux/aufs-kernel/releases/download/$KERNEL_RELEASE/linux-headers-$KERNEL\_$KERNEL-1\_$DISTRIBUTION_ARCH.deb
                DEBIAN_FRONTEND=noninteractive \
                    apt-get install -y ./linux-headers-$KERNEL\_$KERNEL\_$DISTRIBUTION_ARCH.deb gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
                rm ./linux-headers-$KERNEL\_$KERNEL\_$DISTRIBUTION_ARCH.deb
            else
                wget https://github.com/minios-linux/aufs-kernel/releases/download/$KERNEL_RELEASE/linux-headers-$KERNEL\_$KERNEL-1\_$DISTRIBUTION_ARCH.deb
                DEBIAN_FRONTEND=noninteractive \
                    apt-get install -y ./linux-headers-$KERNEL\_$KERNEL\_$DISTRIBUTION_ARCH.deb gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
                rm ./linux-headers-$KERNEL\_$KERNEL\_$DISTRIBUTION_ARCH.deb
            fi
        else
            if [ $KERNEL_TYPE = "default" ]; then
                DEBIAN_FRONTEND=noninteractive \
                    apt-get install -y $BPO linux-headers-$KERNEL_ARCH gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
            else
                DEBIAN_FRONTEND=noninteractive \
                    apt-get install -y $BPO linux-headers-$KERNEL_TYPE-$KERNEL_ARCH gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
            fi
        fi
    elif [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
        apt-get install -y linux-headers-$KERNEL gcc make build-essential libelf-dev debhelper dpkg-dev dkms bc git >>$OUTPUT 2>&1
    fi

    apt-get install -y $BPO broadcom-sta-dkms >>$OUTPUT 2>&1

    if ([ $PACKAGE_VARIANT = "maximum" ] || [ $PACKAGE_VARIANT = "ultra" ] || [ $PACKAGE_VARIANT = "frugal" ]) && [ $DISTRIBUTION_ARCH = "amd64" ] && ! { [ $KERNEL_AUFS = "true" ] && [ $KERNEL_BPO = "true" ] && ([ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ]); }; then
        echo "zfs-dkms        zfs-dkms/note-incompatible-licenses     note" | debconf-set-selections -v >>$OUTPUT 2>&1
        apt-get install -y $BPO zfs-dkms >>$OUTPUT 2>&1
    fi
    if [ $DISTRIBUTION = "kali-rolling" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y realtek-rtl88xxau-dkms >>$OUTPUT 2>&1
    elif [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || ([ $DISTRIBUTION = "bullseye" ] && [ $KERNEL_BPO != "true" ]); then
        #wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl88xxau-dkms/realtek-rtl88xxau-dkms_5.6.4.2~git20220606.cab4e4e-0kali1_all.deb
        #wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8814au-dkms/realtek-rtl8814au-dkms_5.8.5.1~git20220614.af00239-0kali3_all.deb
        #wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8188eus-dkms/realtek-rtl8188eus-dkms_5.3.9~git20220319.0958f29-0kali3_all.deb
        #wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8723cs-dkms/realtek-rtl8723cs-dkms_0.0~git20210902.0fb0c24-0kali1_all.deb
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            realtek-rtl8723cs-dkms \
            realtek-rtl88xxau-dkms \
            rtl8821ce-dkms \
            rtl8821cu-dkms \
            >>$OUTPUT 2>&1
    elif [ $DISTRIBUTION = "bullseye" ] && [ $KERNEL_BPO = "true" ]; then
        #wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl88xxau-dkms/realtek-rtl88xxau-dkms_5.6.4.2~git20220606.cab4e4e-0kali1_all.deb
        #wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8814au-dkms/realtek-rtl8814au-dkms_5.8.5.1~git20220614.af00239-0kali3_all.deb
        #wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8188eus-dkms/realtek-rtl8188eus-dkms_5.3.9~git20220319.0958f29-0kali3_all.deb
        #wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8723cs-dkms/realtek-rtl8723cs-dkms_0.0~git20210902.0fb0c24-0kali1_all.deb
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            realtek-rtl8723cs-dkms \
            rtl8821ce-dkms \
            >>$OUTPUT 2>&1
    elif ([ $DISTRIBUTION = "bookworm" ] || [ $DISTRIBUTION = "sid" ]) && [ $KERNEL_BPO != "true" ]; then
        wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl88xxau-dkms/realtek-rtl88xxau-dkms_5.6.4.2~git20220606.cab4e4e-0kali1_all.deb
        wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8814au-dkms/realtek-rtl8814au-dkms_5.8.5.1~git20220614.af00239-0kali3_all.deb
        wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8188eus-dkms/realtek-rtl8188eus-dkms_5.3.9~git20220319.0958f29-0kali3_all.deb
        wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8723cs-dkms/realtek-rtl8723cs-dkms_0.0~git20210902.0fb0c24-0kali1_all.deb
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            ./realtek-rtl*.deb \
            rtl8821ce-dkms \
            >>$OUTPUT 2>&1
    elif ([ $DISTRIBUTION = "bookworm" ] || [ $DISTRIBUTION = "sid" ]) && [ $KERNEL_BPO = "true" ]; then
        #wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl88xxau-dkms/realtek-rtl88xxau-dkms_5.6.4.2~git20220606.cab4e4e-0kali1_all.deb
        wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8814au-dkms/realtek-rtl8814au-dkms_5.8.5.1~git20220614.af00239-0kali3_all.deb
        wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8188eus-dkms/realtek-rtl8188eus-dkms_5.3.9~git20220319.0958f29-0kali3_all.deb
        wget https://archive-8.kali.org/kali/pool/contrib/r/realtek-rtl8723cs-dkms/realtek-rtl8723cs-dkms_0.0~git20210902.0fb0c24-0kali1_all.deb
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            ./realtek-rtl*.deb \
            rtl8821ce-dkms \
            >>$OUTPUT 2>&1
    else
        #apt-get install -y git build-essential libelf-dev debhelper dpkg-dev dkms bc >>$OUTPUT 2>&1
        git clone https://github.com/aircrack-ng/rtl8812au
        cd rtl8812au
        #sed -i "1140s/.*/KVER  := $KERNEL/g" ./Makefile
        sed -i "s/uname -r/echo $KERNEL/g" ./Makefile
        sed -i "s/uname -m/echo $DISTRIBUTION_ARCH/g" ./Makefile
        sed -i "s/-v \$(DRIVER_VERSION)/-v \$(DRIVER_VERSION) -k $KERNEL/g" ./Makefile
        sed -i "s/\${kernelver}/$KERNEL/g" ./dkms.conf
        make dkms_install
        cd -
    fi
    : 'if ([ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ]) && [ $KERNEL_BPO != "true" ]; then
        git clone https://github.com/aircrack-ng/rtl8812au
        cd rtl8812au
        #sed -i "1140s/.*/KVER  := $KERNEL/g" ./Makefile
        sed -i "s/uname -r/echo $KERNEL/g" ./Makefile
        sed -i "s/uname -m/echo $DISTRIBUTION_ARCH/g" ./Makefile
        sed -i "s/-v \$(DRIVER_VERSION)/-v \$(DRIVER_VERSION) -k $KERNEL/g" ./Makefile
        sed -i "s/\${kernelver}/$KERNEL/g" ./dkms.conf
        make dkms_install
        cd -
    fi'
    if [ $DISTRIBUTION = "kali-rolling" ] || [ $DISTRIBUTION = "bookworm" ] || [ $DISTRIBUTION = "sid" ]; then
        break
    elif [ $KERNEL_AUFS = "true" ] && ([ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ]); then
        break
    else
        git clone https://github.com/cilynx/rtl88x2bu.git
        cd rtl88x2bu
        sed -i "s/uname -r/echo $KERNEL/g" ./Makefile
        sed -i "s/uname -m/echo $KERNEL_BUILD_ARCH/g" ./Makefile
        sed -i "s/\${kernelver}/$KERNEL/g" ./dkms.conf
        make
        make install
        cd -
    fi
    if ([ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ]) && [ $KERNEL_BPO != "true" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y virtualbox-guest-dkms >>$OUTPUT 2>&1
    else
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y genisoimage >>$OUTPUT 2>&1
        TARGET_VER=$KERNEL
        export TARGET_VER
        VBOX_VER=$(curl https://download.virtualbox.org/virtualbox/LATEST-STABLE.TXT)
        cd /tmp
        wget https://download.virtualbox.org/virtualbox/$VBOX_VER/VBoxGuestAdditions_$VBOX_VER.iso
        cd /tmp
        isoinfo -f -R -i /tmp/VBoxGuestAdditions_$VBOX_VER.iso -x /VBoxLinuxAdditions.run >/tmp/VBoxLinuxAdditions.run
        chmod +x /tmp/VBoxLinuxAdditions.run
        set +e
        /tmp/VBoxLinuxAdditions.run
        set -e
    fi
    if [ -f /etc/apt/sources.list.d/mx.list ]; then
        rm /etc/apt/sources.list.d/mx.list
    fi
    if [ -f /etc/apt/sources.list.d/antix.list ]; then
        rm /etc/apt/sources.list.d/antix.list
    fi
fi
