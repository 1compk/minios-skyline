#!/bin/bash

# distribution type
# тип дистрибутива
DISTRIBUTION_TYPE="debian"

# distribution
# дистрибутив
DISTRIBUTION="bullseye"

# distribution arch
# архитектура дистрибутива
DISTRIBUTION_ARCH="amd64"

KERNEL_TYPE="pve"

# окружение рабочего стола
# desktop environment
DESKTOP_ENVIRONMENT="xfce"

# system variant, indicates the used list of packages in modules
# вариант системы, указывает на используемый список пакетов в модулях
PACKAGE_VARIANT="standard"

# тип сжатия
# compresssion type
COMP_TYPE="xz"

# user setup
USER_NAME="live"

# bootstrap variant (used to build Ubuntu)
# вариант bootstrap (используется для сборки Ubuntu)
DISTRIBUTION_VARIANT="minbase"

# path of the log file
# путь файла лога
LOGPATH="/var/log"

# default is output to stdout. you can use OUTPUT="$LOGPATH/$LIVEKITNAME.log" if you want to route events to log file.
# по умолчанию выводится на стандартный вывод. вы можете использовать OUTPUT="$LOGPATH/$LIVEKITNAME.log", если хотите направлять события в файл журнала.
OUTPUT="/dev/stdout"
#OUTPUT="$LOGPATH/$LIVEKITNAME.log"
#OUTPUT="/dev/null"

# if ="true", creates a second iso with a constant filename
# если ="true", создаёт второй iso с постоянным именем файла
BUILD_TEST_ISO="true"

# удаляет старые файлы iso для данного типа сборки
REMOVE_OLD_ISO="true"

# if ="true", creates a copy of minios-live in chroot /opt
# если ="true", создаёт копию minios-live в chroot /opt
DEV_SYSTEM="false"

# if ="true", creates backup in parent folder
# если ="true", создаёт резервную копию в родительской папке
CREATE_BACKUP="false"

#DEBIAN_FRONTEND_TYPE="noninteractive"
DEBIAN_FRONTEND_TYPE="dialog"
#DEBIAN_FRONTEND_TYPE="text"

APT_CMD="apt-get"
APT_OPTIONS="-y"

# iso type
# тип iso
BOOT_TYPE="hybrid"
#BOOT_TYPE=""

# union type used to build the system
# тип union, используемый для сборки системы
UNION_BUILD_TYPE="overlayfs"
#UNION_BUILD_TYPE="aufs"

# Used when assigned to the ISO name when building Minios-Live
SYSTEMNAME="MiniOS"

# using a ready-made bootstrap file during installation. If absent, then it is downloaded and packaged. Subsequent builds unpack the existing bootstrap.
# использование готового файла bootstrap при установке. Если отсутствует, то скачивается и упаковывается. При последующих сборках распаковывается существующий файл bootstrap.
USE_BOOTSTRAP="true"

# using a ready-made rootfs file during installation. If absent, then it is downloaded and packaged. Subsequent builds will unpack the existing rootfs file.
# использование готового файла rootfs при установке. Если отсутствует, то скачивается и упаковывается. При последующих сборках распаковывается существующий файл rootfs.
USE_ROOTFS="false"

SKIP_SETUP_HOST="true"

# deleting sources after building
# удаление исходников после сборки
REMOVE_SOURCES="false"