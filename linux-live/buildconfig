#!/bin/bash

# distribution type
# тип дистрибутива
DISTRIBUTION_TYPE="debian"

# distribution
# дистрибутив
DISTRIBUTION="bullseye"

# distribution arch
# архитектура дистрибутива
DISTRIBUTION_ARCH="amd64"

# окружение рабочего стола
# desktop environment
DESKTOP_ENVIRONMENT="xfce"

# system variant, indicates the used list of packages in modules
# вариант системы, указывает на используемый список пакетов в модулях
PACKAGE_VARIANT="standard"

# тип сжатия
# compresssion type
COMP_TYPE="zstd"

# user setup
USER_NAME="live"

# bootstrap variant (used to build Ubuntu)
# вариант bootstrap (используется для сборки Ubuntu)
DISTRIBUTION_VARIANT="minbase"

# path of the log file
# путь файла лога
LOGPATH="/var/log"

# default is output to stdout. you can use OUTPUT="$LOGPATH/$LIVEKITNAME.log" if you want to route events to log file.
# по умолчанию выводится на стандартный вывод. вы можете использовать OUTPUT="$LOGPATH/$LIVEKITNAME.log", если хотите направлять события в файл журнала.
OUTPUT="/dev/stdout"
#OUTPUT="$LOGPATH/$LIVEKITNAME.log"
#OUTPUT="/dev/null"

# if ="true", creates a second iso with a constant filename
# если ="true", создаёт второй iso с постоянным именем файла
BUILD_TEST_ISO="true"

# removes old iso files for this build type
# удаляет старые файлы iso для данного типа сборки
REMOVE_OLD_ISO="true"

# if ="true", creates a copy of minios-live in chroot /opt
# если ="true", создаёт копию minios-live в chroot /opt
DEV_SYSTEM="false"

# if true, when building the system installs the sources in /opt/minios-live
# если истина, при сборке системы устанавливает исходные коды в /opt/minios-live
DOWNLOAD_SOURCES="false"

# if ="true", creates backup in parent folder
# если ="true", создаёт резервную копию в родительской папке
CREATE_BACKUP="false"

#DEBIAN_FRONTEND_TYPE="noninteractive"
DEBIAN_FRONTEND_TYPE="dialog"
#DEBIAN_FRONTEND_TYPE="text"

APT_CMD="apt-get"
APT_OPTIONS="-y"

# iso type
# тип iso
BOOT_TYPE="hybrid"
#BOOT_TYPE=""

# union type used to build the system
# тип union, используемый для сборки системы
UNION_BUILD_TYPE="overlayfs"
#UNION_BUILD_TYPE="aufs"

# Used when assigned to the ISO name when building minios-live
# Используется при назначении имени ISO при сборке minios-live
SYSTEMNAME="MiniOS"

# using a ready-made bootstrap file during installation. If absent, then it is downloaded and packaged. Subsequent builds unpack the existing bootstrap.
# использование готового файла bootstrap при установке. Если отсутствует, то скачивается и упаковывается. При последующих сборках распаковывается существующий файл bootstrap.
USE_BOOTSTRAP="true"

# using a ready-made rootfs file during installation. If absent, then it is downloaded and packaged. Subsequent builds will unpack the existing rootfs file.
# использование готового файла rootfs при установке. Если отсутствует, то скачивается и упаковывается. При последующих сборках распаковывается существующий файл rootfs.
USE_ROOTFS="true"

USE_MX_REPO="false"
USE_ANTIX_REPO="false"

# if true, then the installation of packages required for the build is skipped
# если истина, то пропускается установка пакетов, необходимых для сборки
SKIP_SETUP_HOST="false"

# deleting sources after building
# удаление исходников после сборки
REMOVE_SOURCES="false"

# if true, then removes the dpkg base from the module (it is necessary so that additional modules do not break the common base if they do not use the cumulative structure of modules and are built relative to a certain level, and not relative to all system modules)
# если истина, то удаляет базу dpkg из модуля (нужно для того, чтобы дополнительные модули не ломали общую базу, если они не используют накопительную структуру модулей и собираются относительно определённого уровня, а не относительно всех модулей системы)
REMOVE_DPKG_DB="false"

REMOVE_LARGE_ICONS="true"

# ! применяется только если модули собираются изнутри запущенной системы
# если истина, то при сборке модулей изнутри системы позволяет установить максимальный уровень, на котором будут собраны модули
# например, уровень 4 - это сборка относительно модулей 01-core, 01-firmware, 02-xorg, 03-desktop, 04-apps. Если модуль собран так, то он не будет конфликтовать с любым модулем, собранным на 4 уровне, если все модули 01-04 присутствуют в системе.
# ! only applies if modules are built from within a running system
# if true, then when building modules from within the system, allows you to set the maximum level at which modules will be built
# for example, level 4 is a build relative to modules 01-core, 01-firmware, 02-xorg, 03-desktop, 04-apps. If the module is built like this, then it will not conflict with any module built at level 4, if all modules 01-04 are present in the system.
FILTER_MODULES="false"

# уровень модуля, см. выше
# module level, see above
FILTER_LEVEL="4"

USE_UNOFFICIAL_REPOSITORY="false"

UNOFFICIAL_REPOSITORY_ADDRESS="10.3.0.3"
