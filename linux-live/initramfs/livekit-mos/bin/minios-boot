#!/bin/bash
#
# System boot configuration script.
# Author: crims0n <https://minios.dev>
#

# ======= Global Variables =======

declare -A VARIABLES_DEFAULTS=(
    ["DEFAULT_TARGET"]="graphical"
    ["CLOUD"]="false"
    ["SCRIPTS"]="false"
    ["AUTOLOGIN"]="true"
)

declare -A VALIDATION_RULES=(
    ["DEFAULT_TARGET"]="^(graphical|multi-user|rescue|emergency)$"
    ["CLOUD"]="^(true|false)$"
    ["SCRIPTS"]="^(true|false)$"
    ["AUTOLOGIN"]="^(true|false)$"
)

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
MINIOS_CONF="/etc/minios/minios.conf"

if [ -d "/usr/lib/systemd/system" ]; then
    SYSTEMDSYSTEM="/usr/lib/systemd/system"
elif [ -d "/lib/systemd/system" ]; then
    SYSTEMDSYSTEM="/lib/systemd/system"
fi

# ======= Functions =======

if [ -f /usr/lib/minios/libminioslive ]; then
    . /usr/lib/minios/libminioslive
    echo "Loaded: /usr/lib/minios/libminioslive"
elif [ -f /lib/minios/libminioslive ]; then
    . /lib/minios/libminioslive
    echo "Loaded: /lib/minios/libminioslive"
fi

set_trace_log() {
    mkdir -p /var/log/minios
    exec 19>/var/log/minios/"$1"
    BASH_XTRACEFD=19
    PS4='${LINENO}: '
    set -x
}

read_cmdline_values() {
    if [ -f /cmdline ]; then
        read -r CMDLINE </cmdline
        read_cmdline "$CMDLINE"
    fi
}

# Check and set default values
check_and_set_defaults() {
    echo "=====> Checking the set values for errors..."
    for VAR_NAME in "${!VARIABLES_DEFAULTS[@]}"; do
        DEFAULT_VALUE="${VARIABLES_DEFAULTS[$VAR_NAME]}"
        ORIGINAL_VALUE="${!VAR_NAME}"

        if [ -z "$ORIGINAL_VALUE" ]; then
            read_config "$MINIOS_CONF" "$VAR_NAME"
            ORIGINAL_VALUE="${!VAR_NAME}"
            if [ -z "$ORIGINAL_VALUE" ]; then
                declare "$VAR_NAME=$DEFAULT_VALUE"
                echo "$VAR_NAME was not set. Using default value: $DEFAULT_VALUE"
            fi
        fi

        if [[ -n ${VALIDATION_RULES[$VAR_NAME]} && ! "$ORIGINAL_VALUE" =~ ${VALIDATION_RULES[$VAR_NAME]} ]]; then
            declare "$VAR_NAME=$DEFAULT_VALUE"
            echo "$VAR_NAME has an invalid value. Using default value: $DEFAULT_VALUE"
        fi

        if [ "$ORIGINAL_VALUE" != "${!VAR_NAME}" ]; then
            echo "$VAR_NAME was changed to: ${!VAR_NAME}"
        fi
    done
}

set_cloud() {
    if [ "$CLOUD" = "true" ]; then
        USER_NAME="root"
        DEFAULT_TARGET="multi-user"
        systemctl enable ssh
    fi
}

set_default_target() {
    if [ -n "$DEFAULT_TARGET" ]; then
        if [ "$TEXT_MODE" = "true" ]; then
            systemctl set-default multi-user
            return
        fi
        systemctl set-default "$DEFAULT_TARGET"
    fi
}

manage_services() {
    local SERVICES_VAR ACTION
    ACTION="$1"
    SERVICES_VAR=""

    if [ "$ACTION" == "enable" ]; then
        SERVICES_VAR="ENABLE_SERVICES"
    elif [ "$ACTION" == "disable" ]; then
        SERVICES_VAR="DISABLE_SERVICES"
    else
        echo "Invalid ACTION: $ACTION"
        return 1
    fi

    if [ -z "${!SERVICES_VAR}" ]; then
        if [ -f "$MINIOS_CONF" ]; then
            read_config "$MINIOS_CONF" "$SERVICES_VAR"
        fi
    fi

    if [ -n "${!SERVICES_VAR}" ]; then
        IFS=',' read -ra SERVICES <<<"${!SERVICES_VAR}"
        for SERVICE in "${SERVICES[@]}"; do
            systemctl "$ACTION" "$SERVICE"
        done
    fi
}

set_autologin() {
    if [ -z "$USER_NAME" ]; then
        if [ -f "$MINIOS_CONF" ]; then
            read_config "$MINIOS_CONF" USER_NAME
        fi
    fi

    if [ "$AUTOLOGIN" = "true" ]; then
        if [ -f "$SYSTEMDSYSTEM/xorg.service" ]; then
            cat <<EOF >"$SYSTEMDSYSTEM/xorg.service"
[Unit]
Description=X-Window
ConditionKernelCommandLine=!text
After=systemd-user-sessions.service

[Service]
ExecStart=/bin/su --login -c "/usr/bin/startx -- :0 vt7 -ac -nolisten tcp" "$USER_NAME"

[Install]
WantedBy=graphical.target
EOF
        fi
    fi

    if [ -f /usr/bin/x11vnc ] && [ -f "$SYSTEMDSYSTEM/x11vnc.service" ]; then
        sed -i "s,-auth guess,-auth /home/$USER_NAME/.Xauthority,g" "$SYSTEMDSYSTEM/x11vnc.service"
    fi
}

set_scripts() {

    if [ -z "$SCRIPTS" ]; then
        if [ -f "$MINIOS_CONF" ]; then
            read_config "$MINIOS_CONF" SCRIPTS
        fi
    fi
    if [ "$SCRIPTS" = "true" ]; then
        systemctl enable minios-script-launcher.service
    else
        systemctl disable minios-script-launcher.service
    fi
}

user_setup() {
    local USER_NAME=$1
    echo "User name is $USER_NAME"
    if [ ! -f /var/.system_configured ]; then
        adduser --uid 1000 --gecos '' "$USER_NAME" --disabled-password
    fi
    cp -rT /etc/skel "/home/$USER_NAME"
    if [ -d "/home/$USER_NAME" ]; then
        for DIR in Desktop Documents Downloads Music Pictures Public Templates Videos; do
            mkdir -p "/home/$USER_NAME/$DIR"
        done
        if [ ! -d "/home/$USER_NAME/.ssh" ]; then
            mkdir "/home/$USER_NAME/.ssh"
            chmod 700 "/home/$USER_NAME/.ssh"
        fi
        if [ -f /root/.ssh/authorized_keys ]; then
            cp /root/.ssh/authorized_keys "/home/$USER_NAME/.ssh/authorized_keys"
        fi
        USER_ID=$(id -u "$USER_NAME")
        GROUP_ID=$(id -g "$USER_NAME")
        chown "$USER_ID:$GROUP_ID" "/home/$USER_NAME"
        chown -R "$USER_ID:$GROUP_ID" "/home/$USER_NAME"
    fi
}

change_user() {
    local USER_NAME=$1
    local USER_GROUP="$USER_NAME"
    local CURRENT_USER_NAME=$2
    local CURRENT_USER_GROUP=$3

    if [ -n "$CURRENT_USER_NAME" ] && [ "$USER_NAME" != "$CURRENT_USER_NAME" ]; then
        usermod -l "$USER_NAME" "$CURRENT_USER_NAME"
        usermod -m -d "/home/$USER_NAME" "$USER_NAME"
        groupmod -n "$USER_GROUP" "$CURRENT_USER_GROUP"
    fi
}

# Main script execution
mkdir -p /etc/minios
console_colors
allow_root_only
set_trace_log "boot.trace"
read_cmdline_values
check_and_set_defaults

set_cloud
set_default_target
manage_services enable
manage_services disable
set_autologin
set_scripts

read_config "/etc/os-release" VERSION_CODENAME
if [ "$VERSION_CODENAME" = "bionic" ]; then
    if [ "$CLOUD" != "true" ]; then
        if id -nu 1000; then
            CURRENT_USER_NAME=$(id -nu 1000)
            CURRENT_USER_GROUP=$(id -ng 1000)
        fi
        if [ "$USER_NAME" != "root" ]; then
            user_setup "$USER_NAME"
            change_user "$USER_NAME" "$CURRENT_USER_NAME" "$CURRENT_USER_GROUP"
        elif [ "$DESKTOP_ENVIRONMENT" = "flux" ]; then
            user_setup "guest"
        fi
    else
        USER_NAME="root"
        DEFAULT_TARGET="multi-user"
    fi
fi

# This block of code is responsible for handling the NTFS3 filesystem support.
# If the NTFS3 kernel module is available, it sets up a Udev rule to use NTFS3 for handling NTFS filesystems.
# If the NTFS3 module is not available, but a previous Udev rule exists, it removes that rule to avoid any conflicts.
if [ -f "/usr/lib/modules/$(uname -r)/kernel/fs/ntfs3/ntfs3.ko" ]; then
    echo "NTFS3 kernel module found, setting up udev rules."
    echo 'SUBSYSTEM=="block", ENV{ID_FS_TYPE}=="ntfs", ENV{ID_FS_TYPE}="ntfs3"' >/etc/udev/rules.d/ntfs3.rules
else
    echo "NTFS3 kernel module not found, removing NTFS3 udev rules."
    rm -f "/etc/udev/rules.d/ntfs3.rules"
fi

# The polkit-actions-handler command is used to manage PolicyKit actions.
# It replaces '<allow_active>auth_admin_keep</allow_active>' with '<allow_active>yes</allow_active>' in PolicyKit action files.
# This allows all active users to perform actions that would normally require administrative privileges without needing to authenticate.
if command -v polkit-actions-handler; then
    echo "Polkit actions handler found, executing."
    polkit-actions-handler
else
    echo "Polkit actions handler not found."
fi

echo ""
echo "/etc/minios/minios.conf configuration file contents:"
cat "/etc/minios/minios.conf"
echo ""
