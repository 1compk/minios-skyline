#!/bin/bash
#
# Ð¡ommand line parsing script.
# Author: crims0n. <http://minios.dev>
#

# ======= Global Variables =======

declare -A VARIABLES_DEFAULTS=(
    ["DEFAULT_TARGET"]="graphical"
    ["CLOUD"]="false"
    ["SCRIPTS"]="false"
    ["AUTOLOGIN"]="true"
)

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
CONFIG="/etc/minios/config"
MINIOSCONFIG="/etc/minios/minios.conf"
if [ -d "/usr/lib/systemd/system" ]; then
    SYSTEMDSYSTEM="/usr/lib/systemd/system"
elif [ -d "/lib/systemd/system" ]; then
    SYSTEMDSYSTEM="/lib/systemd/system"
fi
# ======= Functions =======

if [ -f /lib/minios/libminioslive ]; then
    . /lib/minios/libminioslive
elif [ -f /usr/lib/minios/libminioslive ]; then
    . /usr/lib/minios/libminioslive
fi

set_trace_log() {
    mkdir -p /var/log/minios
    exec 19>/var/log/minios/"$1"
    BASH_XTRACEFD=19
    PS4='${LINENO}: '
    set -x
}

read_cmdline_values() {
    if [ -f /cmdline ]; then
        read -r CMDLINE </cmdline
        read_cmdline "$CMDLINE"
    fi
}

set_cloud() {
    if [ -z "$CLOUD" ]; then
        if [ -f "$MINIOSCONFIG" ]; then
            read_config "$MINIOSCONFIG" CLOUD
            if [ -z "$CLOUD" ]; then
                CLOUD="false"
            fi
        else
            CLOUD="false"
        fi
    fi
    # Check if CLOUD is not a valid value
    if [[ ! "$CLOUD" =~ ^(true|false)$ ]]; then
        # Set CLOUD to its default value
        CLOUD="${VARIABLES_DEFAULTS[CLOUD]}"
    fi
    if [ "$CLOUD" = "true" ]; then
        USER_NAME="root"
        DEFAULT_TARGET="multi-user"
        systemctl enable ssh
    fi
}

set_default_target() {
    if [ -z "$DEFAULT_TARGET" ]; then
        if [ -f "$MINIOSCONFIG" ]; then
            read_config "$MINIOSCONFIG" DEFAULT_TARGET
            if [ -z "$DEFAULT_TARGET" ]; then
                DEFAULT_TARGET="graphical"
            fi
        else
            DEFAULT_TARGET="graphical"
        fi
    fi
    # Check if DEFAULT_TARGET is not a valid systemd target
    if [[ ! "$DEFAULT_TARGET" =~ ^(graphical|multi-user|rescue|emergency)$ ]]; then
        # Set DEFAULT_TARGET to its default value
        DEFAULT_TARGET="${VARIABLES_DEFAULTS[DEFAULT_TARGET]}"
    fi
    if [ -n "$DEFAULT_TARGET" ]; then
        if [ "$TEXT_MODE" = "true" ]; then
            systemctl set-default multi-user
            return
        fi
        systemctl set-default "$DEFAULT_TARGET"
    fi
}

manage_services() {
    local SERVICES_VAR ACTION
    ACTION="$1"
    if [ "$ACTION" == "enable" ]; then
        SERVICES_VAR="ENABLE_SERVICES"
    elif [ "$ACTION" == "disable" ]; then
        SERVICES_VAR="DISABLE_SERVICES"
    else
        echo "Invalid ACTION: $ACTION"
        return 1
    fi

    if [ -z "${!SERVICES_VAR}" ]; then
        if [ "$SCRIPT_DIR" != "/usr/bin" ]; then
            if [ -f "$MINIOSCONFIG" ]; then
                read_config "$MINIOSCONFIG" "$SERVICES_VAR"
            fi
        fi
    fi

    if [ -n "${!SERVICES_VAR}" ]; then
        IFS=',' read -ra SERVICES <<<"${!SERVICES_VAR}"
        for SERVICE in "${SERVICES[@]}"; do
            systemctl "$ACTION" "$SERVICE"
        done
    fi
}

set_autologin() {
    if [ -z "$AUTOLOGIN" ]; then
        if [ -f "$MINIOSCONFIG" ]; then
            read_config "$MINIOSCONFIG" AUTOLOGIN
            if [ -z "$AUTOLOGIN" ]; then
                AUTOLOGIN="true"
            fi
        else
            AUTOLOGIN="true"
        fi
    fi
    # Check if AUTOLOGIN is not a valid value
    if [[ ! "$AUTOLOGIN" =~ ^(true|false)$ ]]; then
        # Set AUTOLOGIN to its default value
        AUTOLOGIN="${VARIABLES_DEFAULTS[AUTOLOGIN]}"
    fi
    if [ -z "$USER_NAME" ]; then
        if [ "$SCRIPT_DIR" != "/usr/bin" ]; then
            if [ -f "$MINIOSCONFIG" ]; then
                read_config "$MINIOSCONFIG" USER_NAME
            fi
        fi
    fi

    if [ "$AUTOLOGIN" = "true" ]; then
        if [ -f $SYSTEMDSYSTEM/xorg.service ]; then
            cat <<EOF >$SYSTEMDSYSTEM/xorg.service
[Unit]
Description=X-Window
ConditionKernelCommandLine=!text
After=systemd-user-sessions.service

[Service]
ExecStart=/bin/su --login -c "/usr/bin/startx -- :0 vt7 -ac -nolisten tcp" "$USER_NAME"

[Install]
WantedBy=graphical.target

EOF
        fi
    fi

    if [ -f /usr/bin/x11vnc ]; then
        sed -i "s,-auth guess,-auth /home/$USER_NAME/.Xauthority,g" $SYSTEMDSYSTEM/x11vnc.service
    fi
}

set_scripts() {
    if [ -z "$SCRIPTS" ]; then
        if [ -f "$MINIOSCONFIG" ]; then
            read_config "$MINIOSCONFIG" SCRIPTS
            if [ -z "$SCRIPTS" ]; then
                SCRIPTS="false"
            fi
        else
            SCRIPTS="false"
        fi
    fi
    # Check if SCRIPTS is not a valid value
    if [[ ! "$SCRIPTS" =~ ^(true|false)$ ]]; then
        # Set SCRIPTS to its default value
        SCRIPTS="${VARIABLES_DEFAULTS[SCRIPTS]}"
    fi

    if [ "$SCRIPTS" = "true" ]; then
        systemctl enable minios-script-launcher.service
    elif [ "$SCRIPTS" = "false" ]; then
        systemctl disable minios-script-launcher.service
    fi
}

user_setup() {
    local USER_NAME=$1
    echo "User name is ${USER_NAME}"
    if [ ! -f /var/.system_configured ]; then
        adduser --uid 1000 --gecos '' "${USER_NAME}" --disabled-password
    fi
}

user_modifications() {
    local USER_NAME=$1
    cp -rT /etc/skel "/home/${USER_NAME}"
}

change_user() {
    local USER_NAME=$1
    local USER_GROUP="${USER_NAME}"
    local CURRENT_USER_NAME=$2
    local CURRENT_USER_GROUP=$3
    if [ -n "${CURRENT_USER_NAME}" ] && [ "${USER_NAME}" != "${CURRENT_USER_NAME}" ]; then
        usermod -l "${USER_NAME}" "${CURRENT_USER_NAME}"
        usermod -m -d "/home/${USER_NAME}" "${USER_NAME}"
        groupmod -n "${USER_GROUP}" "${CURRENT_USER_GROUP}"
    fi
}

create_user_dirs() {
    local USER_NAME=$1
    if [ -d "/home/${USER_NAME}" ]; then
        for DIR in Desktop Documents Downloads Music Pictures Public Templates Videos; do
            mkdir -p "/home/${USER_NAME}/${DIR}"
        done
        if [ ! -d "/home/${USER_NAME}/.ssh" ]; then
            mkdir "/home/${USER_NAME}/.ssh"
            chmod 700 "/home/${USER_NAME}/.ssh"
        fi
        if [ -f /root/.ssh/authorized_keys ]; then
            cp /root/.ssh/authorized_keys "/home/${USER_NAME}/.ssh/authorized_keys"
        fi
        USER_ID=$(id -u "${USER_NAME}")
        GROUP_ID=$(id -g "${USER_NAME}")
        chown ${USER_ID}:${GROUP_ID} "/home/${USER_NAME}"
        chown -R ${USER_ID}:${GROUP_ID} "/home/${USER_NAME}"
    fi
}

mkdir -p /etc/minios
console_colors
allow_root_only
set_trace_log "boot.trace"
read_cmdline_values
set_cloud
set_default_target
manage_services enable
manage_services disable
set_autologin
set_scripts

read_config "$CONFIG" USER_SETUP
if [ "${USER_SETUP}" = "initrd" ]; then
    if [ "${CLOUD}" != "true" ]; then
        if id -nu 1000; then
            CURRENT_USER_NAME=$(id -nu 1000)
            CURRENT_USER_GROUP=$(id -ng 1000)
        fi
        if [ "${USER_NAME}" != "root" ]; then
            user_setup "${USER_NAME}"
            user_modifications "${USER_NAME}"
            change_user "${USER_NAME}" "${CURRENT_USER_NAME}" "${CURRENT_USER_GROUP}"
            create_user_dirs "${USER_NAME}"
        elif [ "${DESKTOP_ENVIRONMENT}" = "flux" ]; then
            user_setup "guest"
            create_user_dirs "guest"
        fi
    else
        USER_NAME="root"
        DEFAULT_TARGET="multi-user"
    fi
fi

echo ""
echo "/etc/minios/minios.conf configuration file contents:"
cat "/etc/minios/minios.conf"
echo ""
