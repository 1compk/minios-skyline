#!/bin/bash
#
# Ð¡ommand line parsing script.
# Author: crims0n. <http://minios.dev>
#

# ======= Global Variables =======

declare -A VARIABLES_DEFAULTS=(
    ["DEFAULT_TARGET"]="graphical"
    ["CLOUD"]="false"
    ["SCRIPTS"]="false"
    ["AUTOLOGIN"]="true"
)

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
CONFIG="/etc/minios/config"
MINIOSCONFIG="/etc/minios/minios.conf"

# ======= Functions =======

source /lib/minios/libminioslive

set_trace_log() {
    if [ ! -d /var/log/minios ]; then
        mkdir -p /var/log/minios
    fi
    exec 19>/var/log/minios/"$1"
    BASH_XTRACEFD=19
    PS4='${LINENO}: '
    set -x
}

read_cmdline() {
    for i in "${@}"; do
        case $i in
        user_name=*)
            USER_NAME="${i#*=}"
            shift
            ;;
        user_password=*)
            USER_PASSWORD="${i#*=}"
            shift
            ;;
        root_password=*)
            ROOT_PASSWORD="${i#*=}"
            shift
            ;;
        host_name=*)
            HOST_NAME="${i#*=}"
            shift
            ;;
        default_target=*)
            DEFAULT_TARGET="${i#*=}"
            shift
            ;;
        text)
            TEXT_MODE="true"
            shift
            ;;
        enable_services=*)
            ENABLE_SERVICES="${i#*=}"
            shift
            ;;
        disable_services=*)
            DISABLE_SERVICES="${i#*=}"
            shift
            ;;
        ssh_key=*)
            SSH_KEY="${i#*=}"
            shift
            ;;
        ${LIVEKITNAME}.flags=*)
            FLAGS="${i#*=}"
            shift
            ;;
        slax.flags=*)
            SFLAGS="${i#*=}"
            shift
            ;;
        toram)
            TORAM="true"
            shift
            ;;
        perchdir=*)
            PERCHDIR="${i#*=}"
            shift
            ;;
        scripts=*)
            SCRIPTS="${i#*=}"
            shift
            ;;
        cloud)
            CLOUD="true"
            shift
            ;;
        hide_credentials)
            HIDE_CREDENTIALS="true"
            shift
            ;;
        static_profiles)
            STATIC_PROFILES="true"
            shift
            ;;
        autologin=*)
            AUTOLOGIN="${i#*=}"
            shift
            ;;
        system_type=*)
            SYSTEM_TYPE="${i#*=}"
            shift
            ;;
        from=*)
            FROM="${i#*=}"
            shift
            ;;
        *)
            UNKNOWN="true"
            ;;
        esac
    done
}

read_cmdline_values() {
    if [ -f /cmdline ]; then
        read -r CMDLINE </cmdline
        read_cmdline "$CMDLINE"
    fi
}

set_cloud() {
    if [ -z "$CLOUD" ]; then
        if [ -f "$MINIOSCONFIG" ]; then
            read_config "$MINIOSCONFIG" CLOUD
            if [ -z "$CLOUD" ]; then
                CLOUD="false"
            fi
        else
            CLOUD="false"
        fi
    fi
    # Check if CLOUD is not a valid value
    if [[ ! "$CLOUD" =~ ^(true|false)$ ]]; then
        # Set CLOUD to its default value
        CLOUD="${VARIABLES_DEFAULTS[CLOUD]}"
    fi
    if [ "$CLOUD" = "true" ]; then
        user="root"
        DEFAULT_TARGET="multi-user"
        systemctl enable ssh
    fi
}

set_default_target() {
    if [ -z "$DEFAULT_TARGET" ]; then
        if [ -f "$MINIOSCONFIG" ]; then
            read_config "$MINIOSCONFIG" DEFAULT_TARGET
            if [ -z "$DEFAULT_TARGET" ]; then
                DEFAULT_TARGET="graphical"
            fi
        else
            DEFAULT_TARGET="graphical"
        fi
    fi
    # Check if DEFAULT_TARGET is not a valid systemd target
    if [[ ! "$DEFAULT_TARGET" =~ ^(graphical|multi-user|rescue|emergency)$ ]]; then
        # Set DEFAULT_TARGET to its default value
        DEFAULT_TARGET="${VARIABLES_DEFAULTS[DEFAULT_TARGET]}"
    fi
    if [ -n "$DEFAULT_TARGET" ]; then
        if [ "$TEXT_MODE" = "true" ]; then
            systemctl set-default multi-user
            return
        fi
        systemctl set-default "$DEFAULT_TARGET"
    fi
}

manage_services() {
    local SERVICES_VAR ACTION
    ACTION="$1"
    if [ "$ACTION" == "enable" ]; then
        SERVICES_VAR="ENABLE_SERVICES"
    elif [ "$ACTION" == "disable" ]; then
        SERVICES_VAR="DISABLE_SERVICES"
    else
        echo "Invalid ACTION: $ACTION"
        return 1
    fi

    if [ -z "${!SERVICES_VAR}" ]; then
        if [ "$SCRIPT_DIR" != "/usr/bin" ]; then
            if [ -f "$MINIOSCONFIG" ]; then
                read_config "$MINIOSCONFIG" "$SERVICES_VAR"
            fi
        fi
    fi

    if [ -n "${!SERVICES_VAR}" ]; then
        IFS=',' read -ra SERVICES <<<"${!SERVICES_VAR}"
        for SERVICE in "${SERVICES[@]}"; do
            if [ "$SERVICE" = "cockpit" ]; then
                systemctl "$ACTION" "$SERVICE.socket"
            else
                systemctl "$ACTION" "$SERVICE.service"
            fi
        done
    fi
}

set_autologin() {
    if [ -z "$AUTOLOGIN" ]; then
        if [ -f "$MINIOSCONFIG" ]; then
            read_config "$MINIOSCONFIG" AUTOLOGIN
            if [ -z "$AUTOLOGIN" ]; then
                AUTOLOGIN="true"
            fi
        else
            AUTOLOGIN="true"
        fi
    fi
    # Check if AUTOLOGIN is not a valid value
    if [[ ! "$AUTOLOGIN" =~ ^(true|false)$ ]]; then
        # Set AUTOLOGIN to its default value
        AUTOLOGIN="${VARIABLES_DEFAULTS[AUTOLOGIN]}"
    fi
    if [ -z "$USER_NAME" ]; then
        if [ "$SCRIPT_DIR" != "/usr/bin" ]; then
            if [ -f "$MINIOSCONFIG" ]; then
                read_config "$MINIOSCONFIG" USER_NAME
            fi
        fi
    fi

    if [ "$AUTOLOGIN" = "true" ]; then
        if [ -f /usr/lib/systemd/system/xorg.service ]; then
            cat <<EOF >/usr/lib/systemd/system/xorg.service
[Unit]
Description=X-Window
ConditionKernelCommandLine=!text
After=systemd-user-sessions.service

[Service]
ExecStart=/bin/su --login -c "/usr/bin/startx -- :0 vt7 -ac -nolisten tcp" "$USER_NAME"

[Install]
WantedBy=graphical.target

EOF
        fi
    fi

    if [ -f /usr/bin/x11vnc ]; then
        sed -i "s,-auth guess,-auth /home/$USER_NAME/.Xauthority,g" /usr/lib/systemd/system/x11vnc.service
    fi
}

set_scripts() {
    if [ -z "$SCRIPTS" ]; then
        if [ -f "$MINIOSCONFIG" ]; then
            read_config "$MINIOSCONFIG" SCRIPTS
            if [ -z "$SCRIPTS" ]; then
                SCRIPTS="false"
            fi
        else
            SCRIPTS="false"
        fi
    fi
    # Check if SCRIPTS is not a valid value
    if [[ ! "$SCRIPTS" =~ ^(true|false)$ ]]; then
        # Set SCRIPTS to its default value
        SCRIPTS="${VARIABLES_DEFAULTS[SCRIPTS]}"
    fi

    if [ "$SCRIPTS" = "true" ]; then
        systemctl enable minios-script-launcher.service
    elif [ "$SCRIPTS" = "false" ]; then
        systemctl disable minios-script-launcher.service
    fi
}

console_colors
allow_root_only
set_trace_log "boot.trace"
read_cmdline_values
set_cloud
set_default_target
manage_services enable
manage_services disable
set_autologin
set_scripts

echo ""
echo "/etc/minios/minios.conf configuration file contents:"
cat "/etc/minios/minios.conf"
echo ""
