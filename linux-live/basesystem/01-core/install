#!/bin/bash

set -e          # exit on error
set -o pipefail # exit on pipeline error
set -u          # treat unset variable as error

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
# To change ubuntu kernel type, you must also edit the values in the firmware module. This will be fixed later.
UBUNTU_IMAGE_HWE="true"

if [ $LOCALE = "en_US" ]; then
    LAYOUT="English (US)"
elif [ $LOCALE = "ru_RU" ]; then
    LAYOUT="Russian"
fi

function timezone_to_array() {
    local IFS
    IFS="/"
    TIMEZONE=($TIMEZONE)
}
function language_to_array() {
    local IFS
    IFS="_"
    LANG=($LOCALE)
}
timezone_to_array
language_to_array
if [ $LOCALE != "en_US" ]; then
    # Keyboard settings
    #echo "keyboard-configuration  keyboard-configuration/optionscode      string  grp:alt_shift_toggle,grp_led:scroll" | debconf-set-selections -v >>$OUTPUT 2>&1
    #echo "keyboard-configuration  keyboard-configuration/switch   select  No temporary switch" | debconf-set-selections -v >>$OUTPUT 2>&1
    echo "keyboard-configuration  keyboard-configuration/layoutcode       string  us,${LANG[0]}" | debconf-set-selections -v >>$OUTPUT 2>&1
    #echo "keyboard-configuration  keyboard-configuration/model    select  Generic 105-key PC (intl.)" | debconf-set-selections -v >>$OUTPUT 2>&1
    echo "keyboard-configuration  keyboard-configuration/variant  select  $LAYOUT" | debconf-set-selections -v >>$OUTPUT 2>&1
    #echo "keyboard-configuration  keyboard-configuration/xkb-keymap       select  us" | debconf-set-selections -v >>$OUTPUT 2>&1
    #echo "keyboard-configuration  keyboard-configuration/ctrl_alt_bksp    boolean false" | debconf-set-selections -v >>$OUTPUT 2>&1
    #echo "keyboard-configuration  keyboard-configuration/altgr    select  The default for the keyboard layout" | debconf-set-selections -v >>$OUTPUT 2>&1
    #echo "keyboard-configuration  keyboard-configuration/modelcode        string  pc105" | debconf-set-selections -v >>$OUTPUT 2>&1
    #echo "keyboard-configuration  keyboard-configuration/compose  select  No compose key" | debconf-set-selections -v >>$OUTPUT 2>&1
    echo "keyboard-configuration  keyboard-configuration/toggle   select  Alt+Shift" | debconf-set-selections -v >>$OUTPUT 2>&1
    # Timezone settings
    echo "tzdata  tzdata/Zones/${TIMEZONE[0]}     select  ${TIMEZONE[1]}" | debconf-set-selections -v >>$OUTPUT 2>&1
    # Locales settings
    echo "locales locales/locales_to_be_generated multiselect     en_US.UTF-8 UTF-8, $LOCALE.UTF-8 UTF-8" | debconf-set-selections -v >>$OUTPUT 2>&1
else
    echo "locales locales/locales_to_be_generated multiselect     en_US.UTF-8 UTF-8" | debconf-set-selections -v >>$OUTPUT 2>&1
    if [ $DISTRIBUTION = "buster" ]; then
        echo "keyboard-configuration  keyboard-configuration/variant  select  $LAYOUT" | debconf-set-selections -v >>$OUTPUT 2>&1
    fi
fi
# Locales settings
echo "locales locales/default_environment_locale      select  $LOCALE.UTF-8" | debconf-set-selections -v >>$OUTPUT 2>&1
if [ $DISTRIBUTION != "buster" ]; then
    # Keyboard settings
    echo "keyboard-configuration  keyboard-configuration/layout   select  $LAYOUT" | debconf-set-selections -v >>$OUTPUT 2>&1
fi
# webdav settings
echo "davfs2 davfs2/suid_file boolean true" | debconf-set-selections -v >>$OUTPUT 2>&1
# Console settings
echo "console-setup   console-setup/codeset47 select  Guess optimal character set" | debconf-set-selections -v >>$OUTPUT 2>&1
echo "console-setup   console-setup/charmap47 select  UTF-8" | debconf-set-selections -v >>$OUTPUT 2>&1
echo "console-setup   console-setup/fontsize-fb47 select  8x16" | debconf-set-selections -v >>$OUTPUT 2>&1
echo "console-setup   console-setup/fontface47select  Fixed" | debconf-set-selections -v >>$OUTPUT 2>&1
echo "console-setup   console-setup/fontsize-text47   select  8x16" | debconf-set-selections -v >>$OUTPUT 2>&1

apt-get update >>$OUTPUT 2>&1

# install packages
if [ -f $SCRIPT_DIR/$PACKAGE_VARIANT.list ]; then
    if [ $DISTRIBUTION = "bookworm" ] || [ $DISTRIBUTION = "kali-rolling" ] || [ $DISTRIBUTION = "sid" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            $(grep -vE "^\s*#" $SCRIPT_DIR/$PACKAGE_VARIANT.list | sed "s/netcat/netcat-traditional/g;/davfs2/d;s/exfat-utils/exfatprogs/g" | tr "\n" " ") >>$OUTPUT 2>&1
    elif [ $DISTRIBUTION = "buster" ]; then
        apt-get install -y \
            $(grep -vE "^\s*#" $SCRIPT_DIR/$PACKAGE_VARIANT.list | sed "s/cockpit-podman/cockpit-docker/g;s/podman/docker/g" | tr "\n" " ") >>$OUTPUT 2>&1
    elif [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            $(grep -vE "^\s*#" $SCRIPT_DIR/$PACKAGE_VARIANT.list | sed "s/acpi-support-base/acpi-support/g") >>$OUTPUT 2>&1
    else
        if [ KERNEL_TYPE = "aufs" ]; then
            DEBIAN_FRONTEND=noninteractive \
                apt-get install -y \
                $(grep -vE "^\s*#" $SCRIPT_DIR/$PACKAGE_VARIANT.list | sed "/zfsutils-linux/d" | tr "\n" " ") >>$OUTPUT 2>&1
        else
            DEBIAN_FRONTEND=noninteractive \
                apt-get install -y \
                $(grep -vE "^\s*#" $SCRIPT_DIR/$PACKAGE_VARIANT.list | tr "\n" " ") >>$OUTPUT 2>&1
        fi
    fi
fi

# install packages
if [ $PACKAGE_VARIANT = "standard" ] || [ $PACKAGE_VARIANT = "maximum" ] || [ $PACKAGE_VARIANT = "ultra" ]; then
    DEBIAN_FRONTEND=noninteractive \
        apt-get install -y \
        zstd >>$OUTPUT 2>&1
    if [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "xenial" ] || [ $DISTRIBUTION = "bionic" ]; then
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            liblz4-tool >>$OUTPUT 2>&1
    else
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            lz4 >>$OUTPUT 2>&1
    fi
fi

# install packages
if [ $DESKTOP_ENVIRONMENT = "slax" ] && [ $DISTRIBUTION = "stretch" ]; then
    DEBIAN_FRONTEND=noninteractive \
        apt-get install -y \
        isc-dhcp-client >>$OUTPUT 2>&1
elif [ $DESKTOP_ENVIRONMENT = "slax" ]; then
    DEBIAN_FRONTEND=noninteractive \
        apt-get install -y \
        connman >>$OUTPUT 2>&1
else
    DEBIAN_FRONTEND=noninteractive \
        apt-get install -y \
        network-manager >>$OUTPUT 2>&1
fi

if [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
    DEBIAN_FRONTEND=noninteractive \
        apt-get install -y \
        cpio >>$OUTPUT 2>&1
fi

if [ $DISTRIBUTION = "bullseye" ] || [ $DISTRIBUTION = "bookworm" ] || [ $DISTRIBUTION = "kali-rolling" ] || [ $DISTRIBUTION = "sid" ]; then
    DEBIAN_FRONTEND=noninteractive \
        apt-get install -y \
        selinux-policy-default >>$OUTPUT 2>&1
    sed -i "s,SELINUX=permissive,SELINUX=disabled,g" /etc/selinux/config
fi

if [ $DISTRIBUTION_TYPE = "debian" ]; then
    if [ $PACKAGE_VARIANT = "maximum" ] || [ $PACKAGE_VARIANT = "ultra" ]; then
        wget http://mxrepo.com/mx/repo/pool/main/m/mx-archive-keyring/mx-archive-keyring_2018.2mx17_all.deb
        wget http://mxrepo.com/mx/repo/pool/main/m/mx19-archive-keyring/mx19-archive-keyring_2020.4.29_all.deb
        wget http://mxrepo.com/mx/repo/pool/main/m/mx21-archive-keyring/mx21-archive-keyring_2021.2.19_all.deb
        wget http://mxrepo.com/mx/repo/pool/main/a/antix-archive-keyring/antix-archive-keyring_20019.3.14_all.deb
        apt-get install -y ./*.deb
        rm ./*.deb
        if [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ] || [ $DISTRIBUTION = "bullseye" ]; then
            cat <<EOF >/etc/apt/sources.list.d/mx.list
# MX Community Main and Test Repos
deb http://mxrepo.com/mx/repo/ $DISTRIBUTION main non-free
#deb http://mxrepo.com/mx/testrepo/ $DISTRIBUTION test

#ahs hardware stack repo
deb http://mxrepo.com/mx/repo/ $DISTRIBUTION ahs
EOF
        elif [ $DISTRIBUTION = "bookworm" ]; then
            cat <<EOF >/etc/apt/sources.list.d/antix.list
deb http://ftp.debian.ru/mirrors/MX-Linux/MX-Packages/antix/testing/ testing main nonfree
EOF
        elif [ $DISTRIBUTION = "sid" ]; then
            cat <<EOF >/etc/apt/s
            ources.list.d/antix.list
deb http://ftp.debian.ru/mirrors/MX-Linux/MX-Packages/antix/$DISTRIBUTION/ $DISTRIBUTION main nonfree
EOF
        fi
        apt-get update >>$OUTPUT 2>&1
        DEBIAN_FRONTEND=noninteractive \
            apt-get install -y \
            virtualbox-guest-utils >>$OUTPUT 2>&1
        if [ -f /etc/apt/sources.list.d/mx.list ]; then
            rm /etc/apt/sources.list.d/mx.list
        fi
        if [ -f /etc/apt/sources.list.d/antix.list ]; then
            rm /etc/apt/sources.list.d/antix.list
        fi
    fi

    if [ $DISTRIBUTION = "bullseye" ] && [ $KERNEL_ARCH = "amd64" ] && [ $KERNEL_TYPE = "pve" ]; then
        wget http://download.proxmox.com/debian/proxmox-release-bullseye.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg
        echo "deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription" >/etc/apt/sources.list.d/pve-install-repo.list
        apt-get update >>$OUTPUT 2>&1 &&
            apt-get full-upgrade -y >>$OUTPUT 2>&1
        #KERNEL_IMAGE="pve-kernel-5.15"
        KERNEL_IMAGE=$(apt-cache depends pve-kernel-5.15 | grep -m 2 'Depends:' | tail -n1 | sed 's/  Depends: //g')
    elif [ $DISTRIBUTION = "orel" ]; then
        #KERNEL_IMAGE="linux-image-5.10-generic"
        KERNEL_IMAGE="$(apt-cache depends linux-image-5.10-generic | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
    else
        KERNEL_IMAGE="linux-image-$KERNEL_ARCH"
    fi
elif [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
    if [ $UBUNTU_IMAGE_HWE = "true" ]; then
        if [ $DISTRIBUTION = "xenial" ]; then
            KERNEL_IMAGE="$(apt-cache depends linux-image-generic-hwe-16.04 | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
        elif [ $DISTRIBUTION = "bionic" ]; then
            KERNEL_IMAGE="$(apt-cache depends linux-image-generic-hwe-18.04 | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
        elif [ $DISTRIBUTION = "focal" ]; then
            KERNEL_IMAGE="$(apt-cache depends linux-image-generic-hwe-20.04 | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
        fi
    else
        KERNEL_IMAGE="$(apt-cache depends linux-image-generic | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
    fi
fi

DEBIAN_FRONTEND=noninteractive \
    apt-get install -y $KERNEL_IMAGE >>$OUTPUT 2>&1
apt-mark hold $KERNEL_IMAGE >>$OUTPUT 2>&1

cat <<'EOF' >/etc/NetworkManager/dispatcher.d/09-timezone
#!/bin/sh
case "$2" in
    up)
        #tzupdate
        timedatectl set-timezone "$(curl --fail https://ipapi.co/timezone)"
    ;;
esac
EOF
chmod +x /etc/NetworkManager/dispatcher.d/09-timezone

if [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
    apt-get autoremove -y linux-modules-extra-* linux-firmware >>$OUTPUT 2>&1
fi

if ([ $PACKAGE_VARIANT = "maximum" ] || [ $PACKAGE_VARIANT = "ultra" ]) && [ $DISTRIBUTION = "bullseye" ]; then
    DEBIAN_FRONTEND=noninteractive \
        apt-get install -y wireguard wireguard-tools
fi

if [ -f /bin/ping ]; then
    chmod +s /bin/ping
fi

if [ $PACKAGE_VARIANT = "ultra" ]; then
    systemctl disable docker.socket
    systemctl disable libvirtd
    systemctl disable iscsid
fi

# configuration

(cd /linux-live/basesystem/01-core/rootcopy-install && cp --parents -afr * /)

if [ $PACKAGE_VARIANT = "minimum" ] || [ $PACKAGE_VARIANT = "standard" ] || [ $DESKTOP_ENVIRONMENT = "mediaplayer" ] || [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "orel" ]; then
    sed -i "s/💀/@/g" /etc/skel/.bashrc
    sed -i "s/💻/@/g" /etc/skel/.bashrc
    sed -i "s/🎄/@/g" /etc/skel/.bashrc
fi

# minios-install setup
if [ $PACKAGE_VARIANT = "minimum" ]; then
    if [ ! -d /usr/lib/usev/rules.d ]; then
        mkdir -p /usr/lib/udev/rules.d
    fi
    cat <<EOF >/usr/lib/udev/rules.d/90-slax-automount.rules
# we don't care about loop* and ram* devices
KERNEL=="[!lr]*", SUBSYSTEM=="block", RUN+="/usr/sbin/slax-automount %r/%k"

EOF
fi

if [ ! -d /etc/$LIVEKITNAME ]; then
    mkdir -p /etc/$LIVEKITNAME
fi
cat <<EOF >/etc/$LIVEKITNAME/config
#!/bin/bash
# This is a config file for MiniOS-Live build script and Linux Live Kit boot script.
# !!! You shouldn't need to change anything expect PACKAGE_VARIANT OUTPUT COMP_TYPE !!!
LIVEKITNAME="$LIVEKITNAME"
SYSTEMNAME="$SYSTEMNAME"
DISTRIBUTION_TYPE="$DISTRIBUTION_TYPE"
DISTRIBUTION="$DISTRIBUTION"
DISTRIBUTION_ARCH="$DISTRIBUTION_ARCH"
PACKAGE_VARIANT="$PACKAGE_VARIANT"
DESKTOP_ENVIRONMENT="$DESKTOP_ENVIRONMENT"
COMP_TYPE="$COMP_TYPE" # Compression method used for the system and modules.
OUTPUT="/dev/stdout" # Default is output to /dev/stdout. You can use OUTPUT="/dev/null" if you want to silent installation or OUTPUT="somefilename.log" to route events to log file.
DEBIAN_FRONTEND_TYPE="noninteractive"
APT_CMD="apt-get"
APT_OPTIONS="-y"
UNION_BUILD_TYPE="overlayfs"
BEXT="sb"
EOF

if [ ! -d /etc/NetworkManager ]; then
    if [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "buster" ]; then
        echo "Enable dhclient.service autostart." >>$OUTPUT 2>&1
        cat <<EOF >/usr/lib/systemd/system/dhclient.service
[Unit]
Description=DHCP Client
Documentation=man:dhclient(8)
Wants=network.target
After=network-pre.target systemd-sysctl.service systemd-modules-load.service
Before=network.target shutdown.target network-online.target
ConditionPathExists=!/run/initramfs/net.up.flag

[Service]
Type=forking
ExecStart=-/bin/sh -c 'udevadm settle && dhclient -nw'
PIDFile=/run/dhclient.pid

[Install]
WantedBy=multi-user.target
WantedBy=network-online.target
EOF
        systemctl enable dhclient >>$OUTPUT 2>&1
    fi
elif [ -d /etc/NetworkManager ] && [[ $DISTRIBUTION = "bionic" || $DISTRIBUTION = "focal" ]]; then
    if [ ! -d /etc/netplan/ ]; then
        mkdir -p /etc/netplan/
    fi
    cat <<EOF >/etc/netplan/01-netcfg.yaml
# This file describes the network interfaces available on your system
# For more information, see netplan(5).
# Set and change netplan renderer to NetworkManager GUI tool 
network:
  version: 2
  renderer: NetworkManager

EOF
    cat <<EOF >/etc/NetworkManager/NetworkManager.conf
[main]
rc-manager=resolvconf
plugins=ifupdown,keyfile
dns=dnsmasq
[ifupdown]
managed=false

EOF
fi

if [ -f /etc/systemd/system/multi-user.target.wants/grub-initrd-fallback.service ]; then
    echo "Disable grub-initrd-fallback.service autostart."
    systemctl disable grub-initrd-fallback.service
fi

if grep -q ssh $SCRIPT_DIR/$PACKAGE_VARIANT.list >>$OUTPUT 2>&1; then
    echo "Enable ssh.service autostart." >>$OUTPUT 2>&1
    cat <<EOF >/usr/lib/systemd/system/ssh-keygen.service
[Unit]
Description=Generate sshd keys
Before=ssh.service

[Service]
Type=oneshot
ExecStart=/usr/bin/ssh-keygen -A
RemainAfterExit=true
stdOutput=journal

[Install]
WantedBy=multi-user.target
EOF
    sed -i 's,#PermitRootLogin prohibit-password,PermitRootLogin yes,g' /etc/ssh/sshd_config
    sed -i 's,#PasswordAuthentication yes,PasswordAuthentication yes,g' /etc/ssh/sshd_config
    systemctl enable ssh-keygen >>$OUTPUT 2>&1
    systemctl disable ssh >>$OUTPUT 2>&1
fi

if [ $DISTRIBUTION = "bullseye" ]; then
    if grep -q podman $SCRIPT_DIR/$PACKAGE_VARIANT.list >>$OUTPUT 2>&1; then
        wget http://ftp.debian.org/debian/pool/main/p/podman-compose/podman-compose_1.0.3-2_all.deb
        apt-get install -y ./podman-compose_1.0.3-2_all.deb
        rm -f ./podman-compose_1.0.3-2_all.deb
        cat <<EOF >>/etc/containers/registries.conf

[registries.search]
registries = ['docker.io', 'registry.fedoraproject.org', 'quay.io', 'registry.access.redhat.com', 'registry.centos.org']

EOF
    fi
fi

if [ ! -f /usr/share/sudo ]; then
    cat <<EOF >/usr/share/sudo
#!/bin/bash
if [ "$#" -lt 1 ]; then
   echo "Usage: sudo [command] [arguments]"
   exit 1
fi

if [ "$UID" = 0 ]; then
   exec "$@"
fi

echo "Sudo is not installed. Run the command as root or install sudo."
EOF
fi

# configure locales
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen >>$OUTPUT 2>&1

if [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
    cat >/etc/default/keyboard <<'EOF'
# KEYBOARD CONFIGURATION FILE

# Consult the keyboard(5) manual page.

XKBMODEL="pc105"
XKBLAYOUT="us"
XKBVARIANT=""
XKBOPTIONS=""

BACKSPACE="guess"
EOF
    dpkg-reconfigure -f noninteractive keyboard-configuration >>$OUTPUT 2>&1
fi

if grep console-setup $SCRIPT_DIR/$PACKAGE_VARIANT.list >>$OUTPUT 2>&1; then
    cat >/etc/default/console-setup <<'EOF'
# CONFIGURATION FILE FOR SETUPCON

# Consult the console-setup(5) manual page.

ACTIVE_CONSOLES="/dev/tty[1-6]"

CHARMAP="UTF-8"

CODESET="guess"
FONTFACE="Fixed"
FONTSIZE="8x16"

VIDEOMODE=

# The following is an example how to use a braille font
# FONT='lat9w-08.psf.gz brl-8x8.psf'
EOF
    dpkg-reconfigure -f noninteractive console-setup >>$OUTPUT 2>&1
fi

#if grep busybox $SCRIPT_DIR/$PACKAGE_VARIANT.list >>$OUTPUT 2>&1; then
#    busybox --install
#fi

if grep -q firewalld $SCRIPT_DIR/$PACKAGE_VARIANT.list >>$OUTPUT 2>&1; then
    systemctl disable firewalld
fi
if grep -q cockpit $SCRIPT_DIR/$PACKAGE_VARIANT.list >>$OUTPUT 2>&1; then
    systemctl disable cockpit.socket
fi

# user setup
adduser --uid 1000 --gecos '' $USER_NAME --disabled-password
usermod -a -G sudo $USER_NAME
usermod -a -G netdev $USER_NAME
if grep -q qemu $SCRIPT_DIR/$PACKAGE_VARIANT.list >>$OUTPUT 2>&1; then
    usermod -a -G libvirt $USER_NAME
fi
