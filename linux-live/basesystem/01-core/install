#!/bin/bash

set -e          # exit on error
set -o pipefail # exit on pipeline error
set -u          # treat unset variable as error

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
# To change ubuntu kernel type, you must also edit the values in the firmware module. This will be fixed later.
UBUNTU_IMAGE_HWE="true"

echo "davfs2 davfs2/suid_file boolean true" | debconf-set-selections -v >>$OUTPUT 2>&1
echo "locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8" | debconf-set-selections -v >>$OUTPUT 2>&1
echo "locales locales/default_environment_locale select en_US.UTF-8" | debconf-set-selections -v >>$OUTPUT 2>&1
#echo "console-setup   console-setup/codeset47 select  Guess optimal character set" | debconf-set-selections -v >>$OUTPUT 2>&1
#echo "console-setup   console-setup/charmap47 select  UTF-8" | debconf-set-selections -v >>$OUTPUT 2>&1
#echo "console-setup   console-setup/fontsize-fb47 select  8x16" | debconf-set-selections -v >>$OUTPUT 2>&1
#echo "console-setup   console-setup/fontface47select  Fixed" | debconf-set-selections -v >>$OUTPUT 2>&1
#echo "console-setup   console-setup/fontsize-text47   select  8x16" | debconf-set-selections -v >>$OUTPUT 2>&1

$APT_CMD update >>$OUTPUT 2>&1

if [ $PACKAGE_VARIANT != "cloud" ]; then
    if [ $DISTRIBUTION_TYPE = "debian" ]; then
        $APT_CMD install $APT_OPTIONS \
            acpi-support-base >>$OUTPUT 2>&1
    elif [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
        $APT_CMD install $APT_OPTIONS --no-install-suggests \
            acpi-support >>$OUTPUT 2>&1
    fi
fi

# install packages
if [ -f $SCRIPT_DIR/$PACKAGE_VARIANT.list ]; then
    if [ $DISTRIBUTION = "bookworm" ] || [ $DISTRIBUTION = "kali-rolling" ]; then
        DEBIAN_FRONTEND=noninteractive \
            $APT_CMD install $APT_OPTIONS \
            $(grep -vE "^\s*#" $SCRIPT_DIR/$PACKAGE_VARIANT.list | sed "s/netcat/netcat-traditional/g" | sed "s/davfs2//g" | tr "\n" " ") >>$OUTPUT 2>&1
    else
        DEBIAN_FRONTEND=noninteractive \
            $APT_CMD install $APT_OPTIONS \
            $(grep -vE "^\s*#" $SCRIPT_DIR/$PACKAGE_VARIANT.list | tr "\n" " ") >>$OUTPUT 2>&1
    fi
fi

# install packages
if [ $PACKAGE_VARIANT = "standard" ]; then
    $APT_CMD install $APT_OPTIONS \
        zstd >>$OUTPUT 2>&1
    if [ $DISTRIBUTION = "stretch" ] || [ $DISTRIBUTION = "xenial" ] || [ $DISTRIBUTION = "bionic" ]; then
        $APT_CMD install $APT_OPTIONS \
            liblz4-tool >>$OUTPUT 2>&1
    else
        $APT_CMD install $APT_OPTIONS \
            lz4 >>$OUTPUT 2>&1
    fi
fi

# install packages
if [ $DESKTOP_ENVIRONMENT = "slax" ] && [ $PACKAGE_VARIANT = "minimal" ]; then
    $APT_CMD install $APT_OPTIONS \
        isc-dhcp-client >>$OUTPUT 2>&1
else
    $APT_CMD install $APT_OPTIONS \
        network-manager >>$OUTPUT 2>&1
fi

if [ $DISTRIBUTION = "bullseye" ] || [ $DISTRIBUTION = "bookworm" ] || [ $DISTRIBUTION = "kali-rolling" ]; then
    $APT_CMD install $APT_OPTIONS \
        selinux-policy-default >>$OUTPUT 2>&1
    sed -i "s,SELINUX=permissive,SELINUX=disabled,g" /etc/selinux/config
fi

if [ $DISTRIBUTION_TYPE = "debian" ]; then
    #if [ $PACKAGE_VARIANT = "cloud" ]; then
    #    KERNEL_IMAGE="linux-image-$KERNEL_ARCH"
    #else
        KERNEL_IMAGE="linux-image-$KERNEL_ARCH"
    #fi
elif [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
    if [ $UBUNTU_IMAGE_HWE = "true" ]; then
        if [ $DISTRIBUTION = "xenial" ]; then
            KERNEL_IMAGE="$(apt-cache depends linux-image-generic-hwe-16.04 | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
        elif [ $DISTRIBUTION = "bionic" ]; then
            KERNEL_IMAGE="$(apt-cache depends linux-image-generic-hwe-18.04 | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
        elif [ $DISTRIBUTION = "focal" ]; then
            KERNEL_IMAGE="$(apt-cache depends linux-image-generic-hwe-20.04 | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
        fi
    else
        KERNEL_IMAGE="$(apt-cache depends linux-image-generic | grep -m 1 'Depends:' | sed 's/  Depends: //g')"
    fi
fi

$APT_CMD install $APT_OPTIONS $KERNEL_IMAGE >>$OUTPUT 2>&1
apt-mark hold $KERNEL_IMAGE >>$OUTPUT 2>&1

if [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
    $APT_CMD autoremove $APT_OPTIONS linux-modules-extra-* linux-firmware >>$OUTPUT 2>&1
fi

if [ -f /bin/ping ]; then
    chmod +s /bin/ping
fi

# configuration

(cd /linux-live/basesystem/01-core/rootcopy-install && cp --parents -afr * /)

if [ $PACKAGE_VARIANT = "minimal" ] || [ $DESKTOP_ENVIRONMENT = "mediaplayer" ]; then
    sed -i "s/ðŸ’€/@/g" /etc/skel/.bashrc
    sed -i "s/ðŸ’»/@/g" /etc/skel/.bashrc
    sed -i "s/ðŸŽ„/@/g" /etc/skel/.bashrc
fi

# minios-install setup
if [ ! -d /etc/$LIVEKITNAME ]; then
    mkdir -p /etc/$LIVEKITNAME
fi
cat <<EOF >/etc/$LIVEKITNAME/config
#!/bin/bash
# This is a config file for MiniOS-Live build script and Linux Live Kit boot script.
# !!! You shouldn't need to change anything expect PACKAGE_VARIANT OUTPUT COMP_TYPE !!!
LIVEKITNAME="$LIVEKITNAME"
SYSTEMNAME="$SYSTEMNAME"
DISTRIBUTION_TYPE="$DISTRIBUTION_TYPE"
DISTRIBUTION="$DISTRIBUTION"
DISTRIBUTION_ARCH="$DISTRIBUTION_ARCH"
PACKAGE_VARIANT="$PACKAGE_VARIANT"
DESKTOP_ENVIRONMENT="$DESKTOP_ENVIRONMENT"
COMP_TYPE="xz" # Compression method used for the system and modules.
OUTPUT="/dev/stdout" # Default is output to /dev/stdout. You can use OUTPUT="/dev/null" if you want to silent installation or OUTPUT="somefilename.log" to route events to log file.
DEBIAN_FRONTEND_TYPE="noninteractive"
APT_CMD="apt-get"
APT_OPTIONS="-y"
UNION_BUILD_TYPE="overlayfs"
BEXT="sb"
EOF

if [ ! -d /etc/NetworkManager ]; then
    echo "Enable dhclient.service autostart." >>$OUTPUT 2>&1
    cat <<EOF >/usr/lib/systemd/system/dhclient.service
[Unit]
Description=DHCP Client
Documentation=man:dhclient(8)
Wants=network.target
After=network-pre.target systemd-sysctl.service systemd-modules-load.service
Before=network.target shutdown.target network-online.target
ConditionPathExists=!/run/initramfs/net.up.flag

[Service]
Type=forking
ExecStart=-/bin/sh -c 'udevadm settle && dhclient -nw'
PIDFile=/run/dhclient.pid

[Install]
WantedBy=multi-user.target
WantedBy=network-online.target
EOF
    systemctl enable dhclient >>$OUTPUT 2>&1
elif [ -d /etc/NetworkManager ] && [[ $DISTRIBUTION = "bionic" || $DISTRIBUTION = "focal" ]]; then
    if [ ! -d /etc/netplan/ ]; then
        mkdir -p /etc/netplan/
    fi
    cat <<EOF >/etc/netplan/01-netcfg.yaml
# This file describes the network interfaces available on your system
# For more information, see netplan(5).
# Set and change netplan renderer to NetworkManager GUI tool 
network:
  version: 2
  renderer: NetworkManager

EOF
    cat <<EOF >/etc/NetworkManager/NetworkManager.conf
[main]
rc-manager=resolvconf
plugins=ifupdown,keyfile
dns=dnsmasq
[ifupdown]
managed=false

EOF
fi

if [ -f /etc/systemd/system/multi-user.target.wants/grub-initrd-fallback.service ]; then
    echo "Disable grub-initrd-fallback.service autostart."
    systemctl disable grub-initrd-fallback.service
fi

if grep openssh-server $SCRIPT_DIR/basesystem/01-core/$PACKAGE_VARIANT.list >>$OUTPUT 2>&1; then
    echo "Enable ssh.service autostart." >>$OUTPUT 2>&1
    cat <<EOF >/usr/lib/systemd/system/ssh-keygen.service
[Unit]
Description=Generate sshd keys
Before=ssh.service

[Service]
Type=oneshot
ExecStart=/usr/bin/ssh-keygen -A
RemainAfterExit=true
StandardOutput=journal

[Install]
WantedBy=multi-user.target
EOF
#if [ $CLOUD != "true" ]; then
#sed -i 's,#PermitRootLogin prohibit-password,PermitRootLogin yes,g' /etc/ssh/sshd_config
#sed -i 's,#PasswordAuthentication yes,PasswordAuthentication yes,g' /etc/ssh/sshd_config
#fi
#systemctl enable ssh-keygen >>$OUTPUT 2>&1
#systemctl enable ssh >>$OUTPUT 2>&1
fi

if [ ! -f /usr/share/sudo ]; then
    cat <<EOF >/usr/share/sudo
#!/bin/bash
if [ "$#" -lt 1 ]; then
   echo "Usage: sudo [command] [arguments]"
   exit 1
fi

if [ "$UID" = 0 ]; then
   exec "$@"
fi

echo "Sudo is not installed. Run the command as root or install sudo."
EOF
fi

# configure locales
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen >>$OUTPUT 2>&1

if [ $DISTRIBUTION_TYPE = "ubuntu" ]; then
    cat >/etc/default/keyboard <<'EOF'
# KEYBOARD CONFIGURATION FILE

# Consult the keyboard(5) manual page.

XKBMODEL="pc105"
XKBLAYOUT="us"
XKBVARIANT=""
XKBOPTIONS=""

BACKSPACE="guess"
EOF

    dpkg-reconfigure -f noninteractive keyboard-configuration >>$OUTPUT 2>&1
fi

cat >/etc/default/console-setup <<'EOF'
# CONFIGURATION FILE FOR SETUPCON

# Consult the console-setup(5) manual page.

ACTIVE_CONSOLES="/dev/tty[1-6]"

CHARMAP="UTF-8"

CODESET="guess"
FONTFACE="Fixed"
FONTSIZE="8x16"

VIDEOMODE=

# The following is an example how to use a braille font
# FONT='lat9w-08.psf.gz brl-8x8.psf'
EOF

dpkg-reconfigure -f noninteractive console-setup >>$OUTPUT 2>&1
