#!/bin/bash

set -e          # exit on error
set -o pipefail # exit on pipeline error
set -u          # treat unset variable as error

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
PARENT_DIR="$(dirname "$SCRIPT_DIR")"
CURRENT_DIR="$(pwd)"
ISO_DIR=$CURRENT_DIR/iso
TMP_DIR="/tmp/"

if [ -f /opt/minios-live/linux-live/minioslib ]; then
    . /opt/minios-live/linux-live/minioslib || exit 1
elif [ -f /run/initramfs/lib/minioslib ]; then
    . /run/initramfs/lib/minioslib || exit 1
fi
if [ -f /opt/minios-live/linux-live/config ]; then
    . /opt/minios-live/linux-live/config || exit 1
elif [ -f /run/initramfs/lib/config ] && grep COMP_TYPE /run/initramfs/lib/config >/dev/null; then
    . /run/initramfs/lib/config || exit 1
fi
if [ -f /opt/minios-live/linux-live/buildconfig ]; then
    . /opt/minios-live/linux-live/buildconfig || exit 1
elif [ -f /run/initramfs/lib/buildconfig ]; then
    . /run/initramfs/lib/buildconfig || exit 1
fi

# change this for unattended installation
UNATTENDED="true"

CMD=(build_modules repack_modules download_sources)

# =============   main  ================

INSTALL_DIR=""

common_variables

console_colours

allow_root_only

create_completion

# check number of args
if [[ $# == 0 || $# > 3 ]]; then help; fi

# loop through args
dash_flag=false
start_index=0
end_index=${#CMD[*]}
for ii in "$@"; do
    if [[ $ii == "-" ]]; then
        dash_flag=true
        continue
    fi
    find_index $ii
    if [[ $dash_flag == false ]]; then
        start_index=$index
    else
        end_index=$(($index + 1))
    fi
done
if [[ $dash_flag == false ]]; then
    end_index=$(($start_index + 1))
fi

#loop through the commands
for ((ii = $start_index; ii < $end_index; ii++)); do
    ${CMD[ii]}
done

echo -e "${BOLD}${LIGHTYELLOW}$0${ENDCOLOUR} - ${LIGHTGREEN}Command completed successfully!${ENDCOLOUR}"
