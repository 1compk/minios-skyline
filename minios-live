#!/bin/bash

# Author: Marcos Tischer Vallim. <https://github.com/mvallim>
# Author: crims0n. <https://minios.dev>

set -e          # exit on error
set -o pipefail # exit on pipeline error
set -u          # treat unset variable as error

SET_E=""
SET_U=""

SCRIPT_DIR="$(dirname "$(readlink -f "${0}")")"

: "${BUILD_SCRIPTS_DIR:="linux-live"}"
: "${MAIN_EXECUTABLE:="minios-live"}"

if [ "$SCRIPT_DIR" = "/usr/bin" ]; then
    MINIOSLIB="/usr/lib/minios-live/minioslib"
    GENERAL_CONF="/etc/minios-live/general.conf"
    : "${BUILD_DIR:="${PWD}/build"}"
else
    MINIOSLIB="$SCRIPT_DIR/$BUILD_SCRIPTS_DIR/minioslib"
    GENERAL_CONF="$SCRIPT_DIR/$BUILD_SCRIPTS_DIR/general.conf"
    : "${BUILD_DIR:="$SCRIPT_DIR/build"}"
fi
. $MINIOSLIB || exit 1
. $GENERAL_CONF || exit 1

: "${BUILD_CONF:="$BUILD_DIR/build.conf"}"
if [ ! -f "$BUILD_CONF" ]; then
    mkdir -p $BUILD_DIR
    if [ "$SCRIPT_DIR" = "/usr/bin" ]; then
        cp "/etc/minios-live/build.conf" $BUILD_CONF
    else
        cp $SCRIPT_DIR/$BUILD_SCRIPTS_DIR/build.conf $BUILD_CONF
    fi
fi
. $BUILD_CONF || exit 1

help() {
    local HEADLINE="${1:-$(gettext 'This script builds bootable MiniOS ISO image.')}"
    local COMMANDS="${CMD[*]}"
    local SYNTAX="$0 [start_cmd] [-] [end_cmd]"
    local EXAMPLES=(
        "${LIGHTYELLOW}  $0 -                              ${ENDCOLOR}$(gettext "Run the build from start to finish.")"
        "${LIGHTYELLOW}  $0 build_bootstrap - build_chroot ${ENDCOLOR}$(gettext "Start the build by building the base environment and finish by installing the entire system in chroot.")"
        "${LIGHTYELLOW}  $0 - build_chroot                 ${ENDCOLOR}$(gettext "Start the build from the beginning and finish by installing the entire system in chroot.")"
        "${LIGHTYELLOW}  $0 build_bootstrap -              ${ENDCOLOR}$(gettext "Start the build by building the base environment and run to completion.")"
        "${LIGHTYELLOW}  $0 build_image                    ${ENDCOLOR}$(gettext "Build only images from previously prepared data.")"
    )

    echo -e "${LIGHTYELLOW}${HEADLINE}${ENDCOLOR}\n"
    echo -e "$(gettext "Supported commands:") ${CYAN}${CMD[*]}${ENDCOLOR}\n"
    echo -e "$(gettext "Usage:") ${MAGENTA}${SYNTAX}${ENDCOLOR}"
    echo -e "$(gettext "  Run from start_cmd to end_cmd")"
    echo -e "$(gettext "  If start_cmd is omitted, start from the first command")"
    echo -e "$(gettext "  If end_cmd is omitted, end with the last command")"
    echo -e "$(gettext "  Enter a single cmd to run the specific command")"
    echo -e "$(gettext "  Enter '-' as the only argument to run all commands\n")"
    echo -e "$(gettext "Examples:")"
    for EXAMPLE in "${EXAMPLES[@]}"; do
        echo -e "${EXAMPLE}"
    done

    exit 0
}

APTCACHE_DIR="$BUILD_DIR/aptcache/$DISTRIBUTION"
ROOTFS_TARBALL="$BUILD_DIR/rootfs/$DISTRIBUTION-$DISTRIBUTION_ARCH-rootfs.tar.gz"
ISO_DIR="$BUILD_DIR/iso"
WORK_DIR="${BUILD_DIR}/${DISTRIBUTION}-${PACKAGE_VARIANT}-${DISTRIBUTION_ARCH}"
INSTALL_DIR="${WORK_DIR}/core"
EXCLUDE_CORE_FILE="${WORK_DIR}/squashfs-core-exclude"

CMD=(setup_host build_bootstrap build_chroot build_live build_config build_modules build_iso remove_sources)

# =============   main  ================

create_log_file "$@"

trap 'mountpoint -q "${WORK_DIR}" && unmount_dirs "${WORK_DIR}"' EXIT

common_variables

console_colors

allow_root_only

if [[ " ${CMD[@]:-} " =~ " ${1:-} " ]] || [[ "${1:-}" == "-" ]]; then
    toggle_shell_options e || exit 1
    check_internet_connection || exit 1
    toggle_shell_options e || exit 1

    [ -f "/.dockerenv" ] || [ "$container" = "podman" ] && new_run

    mkdir -p "${INSTALL_DIR}"

    generate_chroot_configuration_file "${WORK_DIR}/minios-build.conf"

    #generate_squashfs_exclude_file "${EXCLUDE_CORE_FILE}" "${INSTALL_DIR}"

fi

determine_command_range "$@"

# Run commands within the defined range.
for ((ii = "$START_INDEX"; ii < "$END_INDEX"; ii++)); do
    "${CMD[ii]}"
done

echo -e "${BOLD}${LIGHTYELLOW}$0${ENDCOLOR} - ${LIGHTGREEN}Command completed successfully!${ENDCOLOR}"
